
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00800060  00002dfe  00002e92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800128  00800128  00002f5a  2**0
                  ALLOC
  3 .stab         00002814  00000000  00000000  00002f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000db0  00000000  00000000  00005770  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000067d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008419  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a0b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a4a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 32       	cpi	r26, 0x28	; 40
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e2       	ldi	r26, 0x28	; 40
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 32       	cpi	r26, 0x2C	; 44
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <main>
      8a:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e1       	ldi	r26, 0x1F	; 31
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e1       	ldi	r24, 0x1F	; 31
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KeyPad_getPressedKey+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     b50:	1a 82       	std	Y+2, r1	; 0x02
     b52:	4d c0       	rjmp	.+154    	; 0xbee <KeyPad_getPressedKey+0xa8>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     b54:	ea e3       	ldi	r30, 0x3A	; 58
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <KeyPad_getPressedKey+0x22>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	2a 95       	dec	r18
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <KeyPad_getPressedKey+0x1e>
     b6c:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <KeyPad_getPressedKey+0x3e>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <KeyPad_getPressedKey+0x3a>
     b88:	80 95       	com	r24
     b8a:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	29 c0       	rjmp	.+82     	; 0xbe2 <KeyPad_getPressedKey+0x9c>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     b90:	e9 e3       	ldi	r30, 0x39	; 57
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <KeyPad_getPressedKey+0x62>
     ba4:	55 95       	asr	r21
     ba6:	47 95       	ror	r20
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <KeyPad_getPressedKey+0x5e>
     bac:	ca 01       	movw	r24, r20
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	99 f4       	brne	.+38     	; 0xbdc <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	c9 01       	movw	r24, r18
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	82 0f       	add	r24, r18
     bc4:	93 1f       	adc	r25, r19
     bc6:	98 2f       	mov	r25, r24
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	89 0f       	add	r24, r25
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <KeyPad_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	8f 5f       	subi	r24, 0xFF	; 255
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	84 30       	cpi	r24, 0x04	; 4
     be6:	a0 f2       	brcs	.-88     	; 0xb90 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	8a 83       	std	Y+2, r24	; 0x02
     bee:	8a 81       	ldd	r24, Y+2	; 0x02
     bf0:	83 30       	cpi	r24, 0x03	; 3
     bf2:	08 f4       	brcc	.+2      	; 0xbf6 <KeyPad_getPressedKey+0xb0>
     bf4:	af cf       	rjmp	.-162    	; 0xb54 <KeyPad_getPressedKey+0xe>
     bf6:	ac cf       	rjmp	.-168    	; 0xb50 <KeyPad_getPressedKey+0xa>

00000bf8 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3) 

static uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <KeyPad_4x3_adjustKeyNumber+0x6>
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <KeyPad_4x3_adjustKeyNumber+0x8>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	3c 83       	std	Y+4, r19	; 0x04
     c0e:	2b 83       	std	Y+3, r18	; 0x03
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	8a 30       	cpi	r24, 0x0A	; 10
     c16:	91 05       	cpc	r25, r1
     c18:	81 f0       	breq	.+32     	; 0xc3a <KeyPad_4x3_adjustKeyNumber+0x42>
     c1a:	2b 81       	ldd	r18, Y+3	; 0x03
     c1c:	3c 81       	ldd	r19, Y+4	; 0x04
     c1e:	2a 30       	cpi	r18, 0x0A	; 10
     c20:	31 05       	cpc	r19, r1
     c22:	9c f0       	brlt	.+38     	; 0xc4a <KeyPad_4x3_adjustKeyNumber+0x52>
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	8b 30       	cpi	r24, 0x0B	; 11
     c2a:	91 05       	cpc	r25, r1
     c2c:	49 f0       	breq	.+18     	; 0xc40 <KeyPad_4x3_adjustKeyNumber+0x48>
     c2e:	2b 81       	ldd	r18, Y+3	; 0x03
     c30:	3c 81       	ldd	r19, Y+4	; 0x04
     c32:	2c 30       	cpi	r18, 0x0C	; 12
     c34:	31 05       	cpc	r19, r1
     c36:	31 f0       	breq	.+12     	; 0xc44 <KeyPad_4x3_adjustKeyNumber+0x4c>
     c38:	08 c0       	rjmp	.+16     	; 0xc4a <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of *
     c3a:	3a e2       	ldi	r19, 0x2A	; 42
     c3c:	3a 83       	std	Y+2, r19	; 0x02
     c3e:	07 c0       	rjmp	.+14     	; 0xc4e <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
     c40:	1a 82       	std	Y+2, r1	; 0x02
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;		
		case 12: return '#'; // ASCII Code of #
     c44:	83 e2       	ldi	r24, 0x23	; 35
     c46:	8a 83       	std	Y+2, r24	; 0x02
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;								 						
     c4a:	99 81       	ldd	r25, Y+1	; 0x01
     c4c:	9a 83       	std	Y+2, r25	; 0x02
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     c66:	a1 e3       	ldi	r26, 0x31	; 49
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e1 e3       	ldi	r30, 0x31	; 49
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	80 67       	ori	r24, 0x70	; 112
     c72:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
     c74:	a4 e3       	ldi	r26, 0x34	; 52
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e4 e3       	ldi	r30, 0x34	; 52
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	80 6f       	ori	r24, 0xF0	; 240
     c80:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
     c88:	88 e2       	ldi	r24, 0x28	; 40
     c8a:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     c8e:	8c e0       	ldi	r24, 0x0C	; 12
     c90:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
}
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	c3 56       	subi	r28, 0x63	; 99
     cae:	d0 40       	sbci	r29, 0x00	; 0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	fe 01       	movw	r30, r28
     cbc:	ed 59       	subi	r30, 0x9D	; 157
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     cc2:	a2 e3       	ldi	r26, 0x32	; 50
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e2 e3       	ldi	r30, 0x32	; 50
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7e       	andi	r24, 0xEF	; 239
     cce:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     cd0:	a2 e3       	ldi	r26, 0x32	; 50
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e2 e3       	ldi	r30, 0x32	; 50
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24
     cde:	fe 01       	movw	r30, r28
     ce0:	e1 5a       	subi	r30, 0xA1	; 161
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	a0 e8       	ldi	r26, 0x80	; 128
     cea:	bf e3       	ldi	r27, 0x3F	; 63
     cec:	80 83       	st	Z, r24
     cee:	91 83       	std	Z+1, r25	; 0x01
     cf0:	a2 83       	std	Z+2, r26	; 0x02
     cf2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf4:	8e 01       	movw	r16, r28
     cf6:	05 5a       	subi	r16, 0xA5	; 165
     cf8:	1f 4f       	sbci	r17, 0xFF	; 255
     cfa:	fe 01       	movw	r30, r28
     cfc:	e1 5a       	subi	r30, 0xA1	; 161
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	60 81       	ld	r22, Z
     d02:	71 81       	ldd	r23, Z+1	; 0x01
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	4a ef       	ldi	r20, 0xFA	; 250
     d0e:	54 e4       	ldi	r21, 0x44	; 68
     d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	f8 01       	movw	r30, r16
     d1a:	80 83       	st	Z, r24
     d1c:	91 83       	std	Z+1, r25	; 0x01
     d1e:	a2 83       	std	Z+2, r26	; 0x02
     d20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d22:	fe 01       	movw	r30, r28
     d24:	e5 5a       	subi	r30, 0xA5	; 165
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	60 81       	ld	r22, Z
     d2a:	71 81       	ldd	r23, Z+1	; 0x01
     d2c:	82 81       	ldd	r24, Z+2	; 0x02
     d2e:	93 81       	ldd	r25, Z+3	; 0x03
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e8       	ldi	r20, 0x80	; 128
     d36:	5f e3       	ldi	r21, 0x3F	; 63
     d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d3c:	88 23       	and	r24, r24
     d3e:	44 f4       	brge	.+16     	; 0xd50 <LCD_sendCommand+0xb0>
		__ticks = 1;
     d40:	fe 01       	movw	r30, r28
     d42:	e7 5a       	subi	r30, 0xA7	; 167
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	80 83       	st	Z, r24
     d4e:	64 c0       	rjmp	.+200    	; 0xe18 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     d50:	fe 01       	movw	r30, r28
     d52:	e5 5a       	subi	r30, 0xA5	; 165
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	60 81       	ld	r22, Z
     d58:	71 81       	ldd	r23, Z+1	; 0x01
     d5a:	82 81       	ldd	r24, Z+2	; 0x02
     d5c:	93 81       	ldd	r25, Z+3	; 0x03
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	3f ef       	ldi	r19, 0xFF	; 255
     d62:	4f e7       	ldi	r20, 0x7F	; 127
     d64:	57 e4       	ldi	r21, 0x47	; 71
     d66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d6a:	18 16       	cp	r1, r24
     d6c:	0c f0       	brlt	.+2      	; 0xd70 <LCD_sendCommand+0xd0>
     d6e:	43 c0       	rjmp	.+134    	; 0xdf6 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d70:	fe 01       	movw	r30, r28
     d72:	e1 5a       	subi	r30, 0xA1	; 161
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	82 81       	ldd	r24, Z+2	; 0x02
     d7c:	93 81       	ldd	r25, Z+3	; 0x03
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e2       	ldi	r20, 0x20	; 32
     d84:	51 e4       	ldi	r21, 0x41	; 65
     d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	8e 01       	movw	r16, r28
     d90:	07 5a       	subi	r16, 0xA7	; 167
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	bc 01       	movw	r22, r24
     d96:	cd 01       	movw	r24, r26
     d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	f8 01       	movw	r30, r16
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24
     da6:	1f c0       	rjmp	.+62     	; 0xde6 <LCD_sendCommand+0x146>
     da8:	fe 01       	movw	r30, r28
     daa:	e9 5a       	subi	r30, 0xA9	; 169
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	88 ec       	ldi	r24, 0xC8	; 200
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	91 83       	std	Z+1, r25	; 0x01
     db4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db6:	fe 01       	movw	r30, r28
     db8:	e9 5a       	subi	r30, 0xA9	; 169
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	80 81       	ld	r24, Z
     dbe:	91 81       	ldd	r25, Z+1	; 0x01
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <LCD_sendCommand+0x120>
     dc4:	fe 01       	movw	r30, r28
     dc6:	e9 5a       	subi	r30, 0xA9	; 169
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	91 83       	std	Z+1, r25	; 0x01
     dcc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dce:	de 01       	movw	r26, r28
     dd0:	a7 5a       	subi	r26, 0xA7	; 167
     dd2:	bf 4f       	sbci	r27, 0xFF	; 255
     dd4:	fe 01       	movw	r30, r28
     dd6:	e7 5a       	subi	r30, 0xA7	; 167
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	9c 93       	st	X, r25
     de4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de6:	fe 01       	movw	r30, r28
     de8:	e7 5a       	subi	r30, 0xA7	; 167
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	d1 f6       	brne	.-76     	; 0xda8 <LCD_sendCommand+0x108>
     df4:	27 c0       	rjmp	.+78     	; 0xe44 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df6:	8e 01       	movw	r16, r28
     df8:	07 5a       	subi	r16, 0xA7	; 167
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
     dfc:	fe 01       	movw	r30, r28
     dfe:	e5 5a       	subi	r30, 0xA5	; 165
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	60 81       	ld	r22, Z
     e04:	71 81       	ldd	r23, Z+1	; 0x01
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	93 81       	ldd	r25, Z+3	; 0x03
     e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	f8 01       	movw	r30, r16
     e14:	91 83       	std	Z+1, r25	; 0x01
     e16:	80 83       	st	Z, r24
     e18:	de 01       	movw	r26, r28
     e1a:	ab 5a       	subi	r26, 0xAB	; 171
     e1c:	bf 4f       	sbci	r27, 0xFF	; 255
     e1e:	fe 01       	movw	r30, r28
     e20:	e7 5a       	subi	r30, 0xA7	; 167
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	80 81       	ld	r24, Z
     e26:	91 81       	ldd	r25, Z+1	; 0x01
     e28:	8d 93       	st	X+, r24
     e2a:	9c 93       	st	X, r25
     e2c:	fe 01       	movw	r30, r28
     e2e:	eb 5a       	subi	r30, 0xAB	; 171
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <LCD_sendCommand+0x196>
     e3a:	fe 01       	movw	r30, r28
     e3c:	eb 5a       	subi	r30, 0xAB	; 171
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     e44:	a2 e3       	ldi	r26, 0x32	; 50
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e2 e3       	ldi	r30, 0x32	; 50
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 64       	ori	r24, 0x40	; 64
     e50:	8c 93       	st	X, r24
     e52:	fe 01       	movw	r30, r28
     e54:	ef 5a       	subi	r30, 0xAF	; 175
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	a0 e8       	ldi	r26, 0x80	; 128
     e5e:	bf e3       	ldi	r27, 0x3F	; 63
     e60:	80 83       	st	Z, r24
     e62:	91 83       	std	Z+1, r25	; 0x01
     e64:	a2 83       	std	Z+2, r26	; 0x02
     e66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e68:	8e 01       	movw	r16, r28
     e6a:	03 5b       	subi	r16, 0xB3	; 179
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	fe 01       	movw	r30, r28
     e70:	ef 5a       	subi	r30, 0xAF	; 175
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	60 81       	ld	r22, Z
     e76:	71 81       	ldd	r23, Z+1	; 0x01
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	93 81       	ldd	r25, Z+3	; 0x03
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	4a ef       	ldi	r20, 0xFA	; 250
     e82:	54 e4       	ldi	r21, 0x44	; 68
     e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	f8 01       	movw	r30, r16
     e8e:	80 83       	st	Z, r24
     e90:	91 83       	std	Z+1, r25	; 0x01
     e92:	a2 83       	std	Z+2, r26	; 0x02
     e94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e96:	fe 01       	movw	r30, r28
     e98:	e3 5b       	subi	r30, 0xB3	; 179
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 e8       	ldi	r20, 0x80	; 128
     eaa:	5f e3       	ldi	r21, 0x3F	; 63
     eac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eb0:	88 23       	and	r24, r24
     eb2:	44 f4       	brge	.+16     	; 0xec4 <LCD_sendCommand+0x224>
		__ticks = 1;
     eb4:	fe 01       	movw	r30, r28
     eb6:	e5 5b       	subi	r30, 0xB5	; 181
     eb8:	ff 4f       	sbci	r31, 0xFF	; 255
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	91 83       	std	Z+1, r25	; 0x01
     ec0:	80 83       	st	Z, r24
     ec2:	64 c0       	rjmp	.+200    	; 0xf8c <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
     ec4:	fe 01       	movw	r30, r28
     ec6:	e3 5b       	subi	r30, 0xB3	; 179
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	60 81       	ld	r22, Z
     ecc:	71 81       	ldd	r23, Z+1	; 0x01
     ece:	82 81       	ldd	r24, Z+2	; 0x02
     ed0:	93 81       	ldd	r25, Z+3	; 0x03
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	3f ef       	ldi	r19, 0xFF	; 255
     ed6:	4f e7       	ldi	r20, 0x7F	; 127
     ed8:	57 e4       	ldi	r21, 0x47	; 71
     eda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ede:	18 16       	cp	r1, r24
     ee0:	0c f0       	brlt	.+2      	; 0xee4 <LCD_sendCommand+0x244>
     ee2:	43 c0       	rjmp	.+134    	; 0xf6a <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee4:	fe 01       	movw	r30, r28
     ee6:	ef 5a       	subi	r30, 0xAF	; 175
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	60 81       	ld	r22, Z
     eec:	71 81       	ldd	r23, Z+1	; 0x01
     eee:	82 81       	ldd	r24, Z+2	; 0x02
     ef0:	93 81       	ldd	r25, Z+3	; 0x03
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e2       	ldi	r20, 0x20	; 32
     ef8:	51 e4       	ldi	r21, 0x41	; 65
     efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	8e 01       	movw	r16, r28
     f04:	05 5b       	subi	r16, 0xB5	; 181
     f06:	1f 4f       	sbci	r17, 0xFF	; 255
     f08:	bc 01       	movw	r22, r24
     f0a:	cd 01       	movw	r24, r26
     f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	f8 01       	movw	r30, r16
     f16:	91 83       	std	Z+1, r25	; 0x01
     f18:	80 83       	st	Z, r24
     f1a:	1f c0       	rjmp	.+62     	; 0xf5a <LCD_sendCommand+0x2ba>
     f1c:	fe 01       	movw	r30, r28
     f1e:	e7 5b       	subi	r30, 0xB7	; 183
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	88 ec       	ldi	r24, 0xC8	; 200
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	91 83       	std	Z+1, r25	; 0x01
     f28:	80 83       	st	Z, r24
     f2a:	fe 01       	movw	r30, r28
     f2c:	e7 5b       	subi	r30, 0xB7	; 183
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	80 81       	ld	r24, Z
     f32:	91 81       	ldd	r25, Z+1	; 0x01
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <LCD_sendCommand+0x294>
     f38:	fe 01       	movw	r30, r28
     f3a:	e7 5b       	subi	r30, 0xB7	; 183
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f42:	de 01       	movw	r26, r28
     f44:	a5 5b       	subi	r26, 0xB5	; 181
     f46:	bf 4f       	sbci	r27, 0xFF	; 255
     f48:	fe 01       	movw	r30, r28
     f4a:	e5 5b       	subi	r30, 0xB5	; 181
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	80 81       	ld	r24, Z
     f50:	91 81       	ldd	r25, Z+1	; 0x01
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	11 96       	adiw	r26, 0x01	; 1
     f56:	9c 93       	st	X, r25
     f58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5a:	fe 01       	movw	r30, r28
     f5c:	e5 5b       	subi	r30, 0xB5	; 181
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	d1 f6       	brne	.-76     	; 0xf1c <LCD_sendCommand+0x27c>
     f68:	27 c0       	rjmp	.+78     	; 0xfb8 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6a:	8e 01       	movw	r16, r28
     f6c:	05 5b       	subi	r16, 0xB5	; 181
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
     f70:	fe 01       	movw	r30, r28
     f72:	e3 5b       	subi	r30, 0xB3	; 179
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	60 81       	ld	r22, Z
     f78:	71 81       	ldd	r23, Z+1	; 0x01
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	93 81       	ldd	r25, Z+3	; 0x03
     f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	f8 01       	movw	r30, r16
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	80 83       	st	Z, r24
     f8c:	de 01       	movw	r26, r28
     f8e:	a9 5b       	subi	r26, 0xB9	; 185
     f90:	bf 4f       	sbci	r27, 0xFF	; 255
     f92:	fe 01       	movw	r30, r28
     f94:	e5 5b       	subi	r30, 0xB5	; 181
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
     f9a:	91 81       	ldd	r25, Z+1	; 0x01
     f9c:	8d 93       	st	X+, r24
     f9e:	9c 93       	st	X, r25
     fa0:	fe 01       	movw	r30, r28
     fa2:	e9 5b       	subi	r30, 0xB9	; 185
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	80 81       	ld	r24, Z
     fa8:	91 81       	ldd	r25, Z+1	; 0x01
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <LCD_sendCommand+0x30a>
     fae:	fe 01       	movw	r30, r28
     fb0:	e9 5b       	subi	r30, 0xB9	; 185
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	91 83       	std	Z+1, r25	; 0x01
     fb6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
     fb8:	a5 e3       	ldi	r26, 0x35	; 53
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e5 e3       	ldi	r30, 0x35	; 53
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	98 2f       	mov	r25, r24
     fc4:	9f 70       	andi	r25, 0x0F	; 15
     fc6:	fe 01       	movw	r30, r28
     fc8:	ed 59       	subi	r30, 0x9D	; 157
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	80 81       	ld	r24, Z
     fce:	80 7f       	andi	r24, 0xF0	; 240
     fd0:	89 2b       	or	r24, r25
     fd2:	8c 93       	st	X, r24
     fd4:	fe 01       	movw	r30, r28
     fd6:	ed 5b       	subi	r30, 0xBD	; 189
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a0 e8       	ldi	r26, 0x80	; 128
     fe0:	bf e3       	ldi	r27, 0x3F	; 63
     fe2:	80 83       	st	Z, r24
     fe4:	91 83       	std	Z+1, r25	; 0x01
     fe6:	a2 83       	std	Z+2, r26	; 0x02
     fe8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fea:	8e 01       	movw	r16, r28
     fec:	01 5c       	subi	r16, 0xC1	; 193
     fee:	1f 4f       	sbci	r17, 0xFF	; 255
     ff0:	fe 01       	movw	r30, r28
     ff2:	ed 5b       	subi	r30, 0xBD	; 189
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	60 81       	ld	r22, Z
     ff8:	71 81       	ldd	r23, Z+1	; 0x01
     ffa:	82 81       	ldd	r24, Z+2	; 0x02
     ffc:	93 81       	ldd	r25, Z+3	; 0x03
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	4a ef       	ldi	r20, 0xFA	; 250
    1004:	54 e4       	ldi	r21, 0x44	; 68
    1006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	f8 01       	movw	r30, r16
    1010:	80 83       	st	Z, r24
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	a2 83       	std	Z+2, r26	; 0x02
    1016:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1018:	fe 01       	movw	r30, r28
    101a:	ff 96       	adiw	r30, 0x3f	; 63
    101c:	60 81       	ld	r22, Z
    101e:	71 81       	ldd	r23, Z+1	; 0x01
    1020:	82 81       	ldd	r24, Z+2	; 0x02
    1022:	93 81       	ldd	r25, Z+3	; 0x03
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e8       	ldi	r20, 0x80	; 128
    102a:	5f e3       	ldi	r21, 0x3F	; 63
    102c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1030:	88 23       	and	r24, r24
    1032:	2c f4       	brge	.+10     	; 0x103e <LCD_sendCommand+0x39e>
		__ticks = 1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	9e af       	std	Y+62, r25	; 0x3e
    103a:	8d af       	std	Y+61, r24	; 0x3d
    103c:	46 c0       	rjmp	.+140    	; 0x10ca <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    103e:	fe 01       	movw	r30, r28
    1040:	ff 96       	adiw	r30, 0x3f	; 63
    1042:	60 81       	ld	r22, Z
    1044:	71 81       	ldd	r23, Z+1	; 0x01
    1046:	82 81       	ldd	r24, Z+2	; 0x02
    1048:	93 81       	ldd	r25, Z+3	; 0x03
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	3f ef       	ldi	r19, 0xFF	; 255
    104e:	4f e7       	ldi	r20, 0x7F	; 127
    1050:	57 e4       	ldi	r21, 0x47	; 71
    1052:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1056:	18 16       	cp	r1, r24
    1058:	64 f5       	brge	.+88     	; 0x10b2 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105a:	fe 01       	movw	r30, r28
    105c:	ed 5b       	subi	r30, 0xBD	; 189
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	60 81       	ld	r22, Z
    1062:	71 81       	ldd	r23, Z+1	; 0x01
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e2       	ldi	r20, 0x20	; 32
    106e:	51 e4       	ldi	r21, 0x41	; 65
    1070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	9e af       	std	Y+62, r25	; 0x3e
    1086:	8d af       	std	Y+61, r24	; 0x3d
    1088:	0f c0       	rjmp	.+30     	; 0x10a8 <LCD_sendCommand+0x408>
    108a:	88 ec       	ldi	r24, 0xC8	; 200
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9c af       	std	Y+60, r25	; 0x3c
    1090:	8b af       	std	Y+59, r24	; 0x3b
    1092:	8b ad       	ldd	r24, Y+59	; 0x3b
    1094:	9c ad       	ldd	r25, Y+60	; 0x3c
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <LCD_sendCommand+0x3f6>
    109a:	9c af       	std	Y+60, r25	; 0x3c
    109c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109e:	8d ad       	ldd	r24, Y+61	; 0x3d
    10a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	9e af       	std	Y+62, r25	; 0x3e
    10a6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    10aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	69 f7       	brne	.-38     	; 0x108a <LCD_sendCommand+0x3ea>
    10b0:	16 c0       	rjmp	.+44     	; 0x10de <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b2:	fe 01       	movw	r30, r28
    10b4:	ff 96       	adiw	r30, 0x3f	; 63
    10b6:	60 81       	ld	r22, Z
    10b8:	71 81       	ldd	r23, Z+1	; 0x01
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	93 81       	ldd	r25, Z+3	; 0x03
    10be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	9e af       	std	Y+62, r25	; 0x3e
    10c8:	8d af       	std	Y+61, r24	; 0x3d
    10ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    10cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    10ce:	9a af       	std	Y+58, r25	; 0x3a
    10d0:	89 af       	std	Y+57, r24	; 0x39
    10d2:	89 ad       	ldd	r24, Y+57	; 0x39
    10d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <LCD_sendCommand+0x436>
    10da:	9a af       	std	Y+58, r25	; 0x3a
    10dc:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    10de:	a2 e3       	ldi	r26, 0x32	; 50
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e2 e3       	ldi	r30, 0x32	; 50
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8f 7b       	andi	r24, 0xBF	; 191
    10ea:	8c 93       	st	X, r24
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a0 e8       	ldi	r26, 0x80	; 128
    10f2:	bf e3       	ldi	r27, 0x3F	; 63
    10f4:	8d ab       	std	Y+53, r24	; 0x35
    10f6:	9e ab       	std	Y+54, r25	; 0x36
    10f8:	af ab       	std	Y+55, r26	; 0x37
    10fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fc:	6d a9       	ldd	r22, Y+53	; 0x35
    10fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1100:	8f a9       	ldd	r24, Y+55	; 0x37
    1102:	98 ad       	ldd	r25, Y+56	; 0x38
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	4a ef       	ldi	r20, 0xFA	; 250
    110a:	54 e4       	ldi	r21, 0x44	; 68
    110c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	89 ab       	std	Y+49, r24	; 0x31
    1116:	9a ab       	std	Y+50, r25	; 0x32
    1118:	ab ab       	std	Y+51, r26	; 0x33
    111a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    111c:	69 a9       	ldd	r22, Y+49	; 0x31
    111e:	7a a9       	ldd	r23, Y+50	; 0x32
    1120:	8b a9       	ldd	r24, Y+51	; 0x33
    1122:	9c a9       	ldd	r25, Y+52	; 0x34
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e8       	ldi	r20, 0x80	; 128
    112a:	5f e3       	ldi	r21, 0x3F	; 63
    112c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1130:	88 23       	and	r24, r24
    1132:	2c f4       	brge	.+10     	; 0x113e <LCD_sendCommand+0x49e>
		__ticks = 1;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	98 ab       	std	Y+48, r25	; 0x30
    113a:	8f a7       	std	Y+47, r24	; 0x2f
    113c:	3f c0       	rjmp	.+126    	; 0x11bc <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    113e:	69 a9       	ldd	r22, Y+49	; 0x31
    1140:	7a a9       	ldd	r23, Y+50	; 0x32
    1142:	8b a9       	ldd	r24, Y+51	; 0x33
    1144:	9c a9       	ldd	r25, Y+52	; 0x34
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	3f ef       	ldi	r19, 0xFF	; 255
    114a:	4f e7       	ldi	r20, 0x7F	; 127
    114c:	57 e4       	ldi	r21, 0x47	; 71
    114e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1152:	18 16       	cp	r1, r24
    1154:	4c f5       	brge	.+82     	; 0x11a8 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1156:	6d a9       	ldd	r22, Y+53	; 0x35
    1158:	7e a9       	ldd	r23, Y+54	; 0x36
    115a:	8f a9       	ldd	r24, Y+55	; 0x37
    115c:	98 ad       	ldd	r25, Y+56	; 0x38
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e2       	ldi	r20, 0x20	; 32
    1164:	51 e4       	ldi	r21, 0x41	; 65
    1166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	bc 01       	movw	r22, r24
    1170:	cd 01       	movw	r24, r26
    1172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	98 ab       	std	Y+48, r25	; 0x30
    117c:	8f a7       	std	Y+47, r24	; 0x2f
    117e:	0f c0       	rjmp	.+30     	; 0x119e <LCD_sendCommand+0x4fe>
    1180:	88 ec       	ldi	r24, 0xC8	; 200
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	9e a7       	std	Y+46, r25	; 0x2e
    1186:	8d a7       	std	Y+45, r24	; 0x2d
    1188:	8d a5       	ldd	r24, Y+45	; 0x2d
    118a:	9e a5       	ldd	r25, Y+46	; 0x2e
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	f1 f7       	brne	.-4      	; 0x118c <LCD_sendCommand+0x4ec>
    1190:	9e a7       	std	Y+46, r25	; 0x2e
    1192:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1194:	8f a5       	ldd	r24, Y+47	; 0x2f
    1196:	98 a9       	ldd	r25, Y+48	; 0x30
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	98 ab       	std	Y+48, r25	; 0x30
    119c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119e:	8f a5       	ldd	r24, Y+47	; 0x2f
    11a0:	98 a9       	ldd	r25, Y+48	; 0x30
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	69 f7       	brne	.-38     	; 0x1180 <LCD_sendCommand+0x4e0>
    11a6:	14 c0       	rjmp	.+40     	; 0x11d0 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a8:	69 a9       	ldd	r22, Y+49	; 0x31
    11aa:	7a a9       	ldd	r23, Y+50	; 0x32
    11ac:	8b a9       	ldd	r24, Y+51	; 0x33
    11ae:	9c a9       	ldd	r25, Y+52	; 0x34
    11b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	98 ab       	std	Y+48, r25	; 0x30
    11ba:	8f a7       	std	Y+47, r24	; 0x2f
    11bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    11be:	98 a9       	ldd	r25, Y+48	; 0x30
    11c0:	9c a7       	std	Y+44, r25	; 0x2c
    11c2:	8b a7       	std	Y+43, r24	; 0x2b
    11c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    11c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <LCD_sendCommand+0x528>
    11cc:	9c a7       	std	Y+44, r25	; 0x2c
    11ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    11d0:	a2 e3       	ldi	r26, 0x32	; 50
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e2 e3       	ldi	r30, 0x32	; 50
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	80 64       	ori	r24, 0x40	; 64
    11dc:	8c 93       	st	X, r24
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a0 e8       	ldi	r26, 0x80	; 128
    11e4:	bf e3       	ldi	r27, 0x3F	; 63
    11e6:	8f a3       	std	Y+39, r24	; 0x27
    11e8:	98 a7       	std	Y+40, r25	; 0x28
    11ea:	a9 a7       	std	Y+41, r26	; 0x29
    11ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ee:	6f a1       	ldd	r22, Y+39	; 0x27
    11f0:	78 a5       	ldd	r23, Y+40	; 0x28
    11f2:	89 a5       	ldd	r24, Y+41	; 0x29
    11f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	4a ef       	ldi	r20, 0xFA	; 250
    11fc:	54 e4       	ldi	r21, 0x44	; 68
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	8b a3       	std	Y+35, r24	; 0x23
    1208:	9c a3       	std	Y+36, r25	; 0x24
    120a:	ad a3       	std	Y+37, r26	; 0x25
    120c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    120e:	6b a1       	ldd	r22, Y+35	; 0x23
    1210:	7c a1       	ldd	r23, Y+36	; 0x24
    1212:	8d a1       	ldd	r24, Y+37	; 0x25
    1214:	9e a1       	ldd	r25, Y+38	; 0x26
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e8       	ldi	r20, 0x80	; 128
    121c:	5f e3       	ldi	r21, 0x3F	; 63
    121e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1222:	88 23       	and	r24, r24
    1224:	2c f4       	brge	.+10     	; 0x1230 <LCD_sendCommand+0x590>
		__ticks = 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9a a3       	std	Y+34, r25	; 0x22
    122c:	89 a3       	std	Y+33, r24	; 0x21
    122e:	3f c0       	rjmp	.+126    	; 0x12ae <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1230:	6b a1       	ldd	r22, Y+35	; 0x23
    1232:	7c a1       	ldd	r23, Y+36	; 0x24
    1234:	8d a1       	ldd	r24, Y+37	; 0x25
    1236:	9e a1       	ldd	r25, Y+38	; 0x26
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	3f ef       	ldi	r19, 0xFF	; 255
    123c:	4f e7       	ldi	r20, 0x7F	; 127
    123e:	57 e4       	ldi	r21, 0x47	; 71
    1240:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1244:	18 16       	cp	r1, r24
    1246:	4c f5       	brge	.+82     	; 0x129a <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1248:	6f a1       	ldd	r22, Y+39	; 0x27
    124a:	78 a5       	ldd	r23, Y+40	; 0x28
    124c:	89 a5       	ldd	r24, Y+41	; 0x29
    124e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e2       	ldi	r20, 0x20	; 32
    1256:	51 e4       	ldi	r21, 0x41	; 65
    1258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	bc 01       	movw	r22, r24
    1262:	cd 01       	movw	r24, r26
    1264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	9a a3       	std	Y+34, r25	; 0x22
    126e:	89 a3       	std	Y+33, r24	; 0x21
    1270:	0f c0       	rjmp	.+30     	; 0x1290 <LCD_sendCommand+0x5f0>
    1272:	88 ec       	ldi	r24, 0xC8	; 200
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	98 a3       	std	Y+32, r25	; 0x20
    1278:	8f 8f       	std	Y+31, r24	; 0x1f
    127a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    127c:	98 a1       	ldd	r25, Y+32	; 0x20
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <LCD_sendCommand+0x5de>
    1282:	98 a3       	std	Y+32, r25	; 0x20
    1284:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1286:	89 a1       	ldd	r24, Y+33	; 0x21
    1288:	9a a1       	ldd	r25, Y+34	; 0x22
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	9a a3       	std	Y+34, r25	; 0x22
    128e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1290:	89 a1       	ldd	r24, Y+33	; 0x21
    1292:	9a a1       	ldd	r25, Y+34	; 0x22
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	69 f7       	brne	.-38     	; 0x1272 <LCD_sendCommand+0x5d2>
    1298:	14 c0       	rjmp	.+40     	; 0x12c2 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129a:	6b a1       	ldd	r22, Y+35	; 0x23
    129c:	7c a1       	ldd	r23, Y+36	; 0x24
    129e:	8d a1       	ldd	r24, Y+37	; 0x25
    12a0:	9e a1       	ldd	r25, Y+38	; 0x26
    12a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	9a a3       	std	Y+34, r25	; 0x22
    12ac:	89 a3       	std	Y+33, r24	; 0x21
    12ae:	89 a1       	ldd	r24, Y+33	; 0x21
    12b0:	9a a1       	ldd	r25, Y+34	; 0x22
    12b2:	9e 8f       	std	Y+30, r25	; 0x1e
    12b4:	8d 8f       	std	Y+29, r24	; 0x1d
    12b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <LCD_sendCommand+0x61a>
    12be:	9e 8f       	std	Y+30, r25	; 0x1e
    12c0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    12c2:	a5 e3       	ldi	r26, 0x35	; 53
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e5 e3       	ldi	r30, 0x35	; 53
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	28 2f       	mov	r18, r24
    12ce:	2f 70       	andi	r18, 0x0F	; 15
    12d0:	fe 01       	movw	r30, r28
    12d2:	ed 59       	subi	r30, 0x9D	; 157
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	80 81       	ld	r24, Z
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	82 95       	swap	r24
    12de:	92 95       	swap	r25
    12e0:	90 7f       	andi	r25, 0xF0	; 240
    12e2:	98 27       	eor	r25, r24
    12e4:	80 7f       	andi	r24, 0xF0	; 240
    12e6:	98 27       	eor	r25, r24
    12e8:	82 2b       	or	r24, r18
    12ea:	8c 93       	st	X, r24
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a0 e8       	ldi	r26, 0x80	; 128
    12f2:	bf e3       	ldi	r27, 0x3F	; 63
    12f4:	89 8f       	std	Y+25, r24	; 0x19
    12f6:	9a 8f       	std	Y+26, r25	; 0x1a
    12f8:	ab 8f       	std	Y+27, r26	; 0x1b
    12fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fc:	69 8d       	ldd	r22, Y+25	; 0x19
    12fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1300:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1302:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	4a ef       	ldi	r20, 0xFA	; 250
    130a:	54 e4       	ldi	r21, 0x44	; 68
    130c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	8d 8b       	std	Y+21, r24	; 0x15
    1316:	9e 8b       	std	Y+22, r25	; 0x16
    1318:	af 8b       	std	Y+23, r26	; 0x17
    131a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    131c:	6d 89       	ldd	r22, Y+21	; 0x15
    131e:	7e 89       	ldd	r23, Y+22	; 0x16
    1320:	8f 89       	ldd	r24, Y+23	; 0x17
    1322:	98 8d       	ldd	r25, Y+24	; 0x18
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e8       	ldi	r20, 0x80	; 128
    132a:	5f e3       	ldi	r21, 0x3F	; 63
    132c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1330:	88 23       	and	r24, r24
    1332:	2c f4       	brge	.+10     	; 0x133e <LCD_sendCommand+0x69e>
		__ticks = 1;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9c 8b       	std	Y+20, r25	; 0x14
    133a:	8b 8b       	std	Y+19, r24	; 0x13
    133c:	3f c0       	rjmp	.+126    	; 0x13bc <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    133e:	6d 89       	ldd	r22, Y+21	; 0x15
    1340:	7e 89       	ldd	r23, Y+22	; 0x16
    1342:	8f 89       	ldd	r24, Y+23	; 0x17
    1344:	98 8d       	ldd	r25, Y+24	; 0x18
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	3f ef       	ldi	r19, 0xFF	; 255
    134a:	4f e7       	ldi	r20, 0x7F	; 127
    134c:	57 e4       	ldi	r21, 0x47	; 71
    134e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1352:	18 16       	cp	r1, r24
    1354:	4c f5       	brge	.+82     	; 0x13a8 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1356:	69 8d       	ldd	r22, Y+25	; 0x19
    1358:	7a 8d       	ldd	r23, Y+26	; 0x1a
    135a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    135c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e2       	ldi	r20, 0x20	; 32
    1364:	51 e4       	ldi	r21, 0x41	; 65
    1366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	bc 01       	movw	r22, r24
    1370:	cd 01       	movw	r24, r26
    1372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	9c 8b       	std	Y+20, r25	; 0x14
    137c:	8b 8b       	std	Y+19, r24	; 0x13
    137e:	0f c0       	rjmp	.+30     	; 0x139e <LCD_sendCommand+0x6fe>
    1380:	88 ec       	ldi	r24, 0xC8	; 200
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	9a 8b       	std	Y+18, r25	; 0x12
    1386:	89 8b       	std	Y+17, r24	; 0x11
    1388:	89 89       	ldd	r24, Y+17	; 0x11
    138a:	9a 89       	ldd	r25, Y+18	; 0x12
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <LCD_sendCommand+0x6ec>
    1390:	9a 8b       	std	Y+18, r25	; 0x12
    1392:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1394:	8b 89       	ldd	r24, Y+19	; 0x13
    1396:	9c 89       	ldd	r25, Y+20	; 0x14
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	9c 8b       	std	Y+20, r25	; 0x14
    139c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139e:	8b 89       	ldd	r24, Y+19	; 0x13
    13a0:	9c 89       	ldd	r25, Y+20	; 0x14
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	69 f7       	brne	.-38     	; 0x1380 <LCD_sendCommand+0x6e0>
    13a6:	14 c0       	rjmp	.+40     	; 0x13d0 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a8:	6d 89       	ldd	r22, Y+21	; 0x15
    13aa:	7e 89       	ldd	r23, Y+22	; 0x16
    13ac:	8f 89       	ldd	r24, Y+23	; 0x17
    13ae:	98 8d       	ldd	r25, Y+24	; 0x18
    13b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	9c 8b       	std	Y+20, r25	; 0x14
    13ba:	8b 8b       	std	Y+19, r24	; 0x13
    13bc:	8b 89       	ldd	r24, Y+19	; 0x13
    13be:	9c 89       	ldd	r25, Y+20	; 0x14
    13c0:	98 8b       	std	Y+16, r25	; 0x10
    13c2:	8f 87       	std	Y+15, r24	; 0x0f
    13c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c6:	98 89       	ldd	r25, Y+16	; 0x10
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <LCD_sendCommand+0x728>
    13cc:	98 8b       	std	Y+16, r25	; 0x10
    13ce:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    13d0:	a2 e3       	ldi	r26, 0x32	; 50
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e2 e3       	ldi	r30, 0x32	; 50
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8f 7b       	andi	r24, 0xBF	; 191
    13dc:	8c 93       	st	X, r24
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a0 e8       	ldi	r26, 0x80	; 128
    13e4:	bf e3       	ldi	r27, 0x3F	; 63
    13e6:	8b 87       	std	Y+11, r24	; 0x0b
    13e8:	9c 87       	std	Y+12, r25	; 0x0c
    13ea:	ad 87       	std	Y+13, r26	; 0x0d
    13ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	4a ef       	ldi	r20, 0xFA	; 250
    13fc:	54 e4       	ldi	r21, 0x44	; 68
    13fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	8f 83       	std	Y+7, r24	; 0x07
    1408:	98 87       	std	Y+8, r25	; 0x08
    140a:	a9 87       	std	Y+9, r26	; 0x09
    140c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    140e:	6f 81       	ldd	r22, Y+7	; 0x07
    1410:	78 85       	ldd	r23, Y+8	; 0x08
    1412:	89 85       	ldd	r24, Y+9	; 0x09
    1414:	9a 85       	ldd	r25, Y+10	; 0x0a
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e8       	ldi	r20, 0x80	; 128
    141c:	5f e3       	ldi	r21, 0x3F	; 63
    141e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1422:	88 23       	and	r24, r24
    1424:	2c f4       	brge	.+10     	; 0x1430 <LCD_sendCommand+0x790>
		__ticks = 1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	9e 83       	std	Y+6, r25	; 0x06
    142c:	8d 83       	std	Y+5, r24	; 0x05
    142e:	3f c0       	rjmp	.+126    	; 0x14ae <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1430:	6f 81       	ldd	r22, Y+7	; 0x07
    1432:	78 85       	ldd	r23, Y+8	; 0x08
    1434:	89 85       	ldd	r24, Y+9	; 0x09
    1436:	9a 85       	ldd	r25, Y+10	; 0x0a
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	3f ef       	ldi	r19, 0xFF	; 255
    143c:	4f e7       	ldi	r20, 0x7F	; 127
    143e:	57 e4       	ldi	r21, 0x47	; 71
    1440:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1444:	18 16       	cp	r1, r24
    1446:	4c f5       	brge	.+82     	; 0x149a <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1448:	6b 85       	ldd	r22, Y+11	; 0x0b
    144a:	7c 85       	ldd	r23, Y+12	; 0x0c
    144c:	8d 85       	ldd	r24, Y+13	; 0x0d
    144e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e2       	ldi	r20, 0x20	; 32
    1456:	51 e4       	ldi	r21, 0x41	; 65
    1458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9e 83       	std	Y+6, r25	; 0x06
    146e:	8d 83       	std	Y+5, r24	; 0x05
    1470:	0f c0       	rjmp	.+30     	; 0x1490 <LCD_sendCommand+0x7f0>
    1472:	88 ec       	ldi	r24, 0xC8	; 200
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9c 83       	std	Y+4, r25	; 0x04
    1478:	8b 83       	std	Y+3, r24	; 0x03
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <LCD_sendCommand+0x7de>
    1482:	9c 83       	std	Y+4, r25	; 0x04
    1484:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	9e 81       	ldd	r25, Y+6	; 0x06
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	9e 81       	ldd	r25, Y+6	; 0x06
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	69 f7       	brne	.-38     	; 0x1472 <LCD_sendCommand+0x7d2>
    1498:	14 c0       	rjmp	.+40     	; 0x14c2 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149a:	6f 81       	ldd	r22, Y+7	; 0x07
    149c:	78 85       	ldd	r23, Y+8	; 0x08
    149e:	89 85       	ldd	r24, Y+9	; 0x09
    14a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9e 83       	std	Y+6, r25	; 0x06
    14ac:	8d 83       	std	Y+5, r24	; 0x05
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	9e 81       	ldd	r25, Y+6	; 0x06
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <LCD_sendCommand+0x81a>
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    14c2:	cd 59       	subi	r28, 0x9D	; 157
    14c4:	df 4f       	sbci	r29, 0xFF	; 255
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	08 95       	ret

000014da <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	c3 56       	subi	r28, 0x63	; 99
    14e8:	d0 40       	sbci	r29, 0x00	; 0
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	fe 01       	movw	r30, r28
    14f6:	ed 59       	subi	r30, 0x9D	; 157
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    14fc:	a2 e3       	ldi	r26, 0x32	; 50
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e2 e3       	ldi	r30, 0x32	; 50
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	80 61       	ori	r24, 0x10	; 16
    1508:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    150a:	a2 e3       	ldi	r26, 0x32	; 50
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e2 e3       	ldi	r30, 0x32	; 50
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8f 7d       	andi	r24, 0xDF	; 223
    1516:	8c 93       	st	X, r24
    1518:	fe 01       	movw	r30, r28
    151a:	e1 5a       	subi	r30, 0xA1	; 161
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a0 e8       	ldi	r26, 0x80	; 128
    1524:	bf e3       	ldi	r27, 0x3F	; 63
    1526:	80 83       	st	Z, r24
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	a2 83       	std	Z+2, r26	; 0x02
    152c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152e:	8e 01       	movw	r16, r28
    1530:	05 5a       	subi	r16, 0xA5	; 165
    1532:	1f 4f       	sbci	r17, 0xFF	; 255
    1534:	fe 01       	movw	r30, r28
    1536:	e1 5a       	subi	r30, 0xA1	; 161
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	4a ef       	ldi	r20, 0xFA	; 250
    1548:	54 e4       	ldi	r21, 0x44	; 68
    154a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	f8 01       	movw	r30, r16
    1554:	80 83       	st	Z, r24
    1556:	91 83       	std	Z+1, r25	; 0x01
    1558:	a2 83       	std	Z+2, r26	; 0x02
    155a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    155c:	fe 01       	movw	r30, r28
    155e:	e5 5a       	subi	r30, 0xA5	; 165
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	60 81       	ld	r22, Z
    1564:	71 81       	ldd	r23, Z+1	; 0x01
    1566:	82 81       	ldd	r24, Z+2	; 0x02
    1568:	93 81       	ldd	r25, Z+3	; 0x03
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	40 e8       	ldi	r20, 0x80	; 128
    1570:	5f e3       	ldi	r21, 0x3F	; 63
    1572:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1576:	88 23       	and	r24, r24
    1578:	44 f4       	brge	.+16     	; 0x158a <LCD_displayCharacter+0xb0>
		__ticks = 1;
    157a:	fe 01       	movw	r30, r28
    157c:	e7 5a       	subi	r30, 0xA7	; 167
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	91 83       	std	Z+1, r25	; 0x01
    1586:	80 83       	st	Z, r24
    1588:	64 c0       	rjmp	.+200    	; 0x1652 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    158a:	fe 01       	movw	r30, r28
    158c:	e5 5a       	subi	r30, 0xA5	; 165
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	60 81       	ld	r22, Z
    1592:	71 81       	ldd	r23, Z+1	; 0x01
    1594:	82 81       	ldd	r24, Z+2	; 0x02
    1596:	93 81       	ldd	r25, Z+3	; 0x03
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	3f ef       	ldi	r19, 0xFF	; 255
    159c:	4f e7       	ldi	r20, 0x7F	; 127
    159e:	57 e4       	ldi	r21, 0x47	; 71
    15a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a4:	18 16       	cp	r1, r24
    15a6:	0c f0       	brlt	.+2      	; 0x15aa <LCD_displayCharacter+0xd0>
    15a8:	43 c0       	rjmp	.+134    	; 0x1630 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15aa:	fe 01       	movw	r30, r28
    15ac:	e1 5a       	subi	r30, 0xA1	; 161
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	93 81       	ldd	r25, Z+3	; 0x03
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e2       	ldi	r20, 0x20	; 32
    15be:	51 e4       	ldi	r21, 0x41	; 65
    15c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	8e 01       	movw	r16, r28
    15ca:	07 5a       	subi	r16, 0xA7	; 167
    15cc:	1f 4f       	sbci	r17, 0xFF	; 255
    15ce:	bc 01       	movw	r22, r24
    15d0:	cd 01       	movw	r24, r26
    15d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	f8 01       	movw	r30, r16
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	80 83       	st	Z, r24
    15e0:	1f c0       	rjmp	.+62     	; 0x1620 <LCD_displayCharacter+0x146>
    15e2:	fe 01       	movw	r30, r28
    15e4:	e9 5a       	subi	r30, 0xA9	; 169
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	88 ec       	ldi	r24, 0xC8	; 200
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	91 83       	std	Z+1, r25	; 0x01
    15ee:	80 83       	st	Z, r24
    15f0:	fe 01       	movw	r30, r28
    15f2:	e9 5a       	subi	r30, 0xA9	; 169
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	80 81       	ld	r24, Z
    15f8:	91 81       	ldd	r25, Z+1	; 0x01
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <LCD_displayCharacter+0x120>
    15fe:	fe 01       	movw	r30, r28
    1600:	e9 5a       	subi	r30, 0xA9	; 169
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	91 83       	std	Z+1, r25	; 0x01
    1606:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1608:	de 01       	movw	r26, r28
    160a:	a7 5a       	subi	r26, 0xA7	; 167
    160c:	bf 4f       	sbci	r27, 0xFF	; 255
    160e:	fe 01       	movw	r30, r28
    1610:	e7 5a       	subi	r30, 0xA7	; 167
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	80 81       	ld	r24, Z
    1616:	91 81       	ldd	r25, Z+1	; 0x01
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	11 96       	adiw	r26, 0x01	; 1
    161c:	9c 93       	st	X, r25
    161e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1620:	fe 01       	movw	r30, r28
    1622:	e7 5a       	subi	r30, 0xA7	; 167
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	80 81       	ld	r24, Z
    1628:	91 81       	ldd	r25, Z+1	; 0x01
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	d1 f6       	brne	.-76     	; 0x15e2 <LCD_displayCharacter+0x108>
    162e:	27 c0       	rjmp	.+78     	; 0x167e <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1630:	8e 01       	movw	r16, r28
    1632:	07 5a       	subi	r16, 0xA7	; 167
    1634:	1f 4f       	sbci	r17, 0xFF	; 255
    1636:	fe 01       	movw	r30, r28
    1638:	e5 5a       	subi	r30, 0xA5	; 165
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	60 81       	ld	r22, Z
    163e:	71 81       	ldd	r23, Z+1	; 0x01
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	93 81       	ldd	r25, Z+3	; 0x03
    1644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	f8 01       	movw	r30, r16
    164e:	91 83       	std	Z+1, r25	; 0x01
    1650:	80 83       	st	Z, r24
    1652:	de 01       	movw	r26, r28
    1654:	ab 5a       	subi	r26, 0xAB	; 171
    1656:	bf 4f       	sbci	r27, 0xFF	; 255
    1658:	fe 01       	movw	r30, r28
    165a:	e7 5a       	subi	r30, 0xA7	; 167
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	80 81       	ld	r24, Z
    1660:	91 81       	ldd	r25, Z+1	; 0x01
    1662:	8d 93       	st	X+, r24
    1664:	9c 93       	st	X, r25
    1666:	fe 01       	movw	r30, r28
    1668:	eb 5a       	subi	r30, 0xAB	; 171
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 81       	ld	r24, Z
    166e:	91 81       	ldd	r25, Z+1	; 0x01
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <LCD_displayCharacter+0x196>
    1674:	fe 01       	movw	r30, r28
    1676:	eb 5a       	subi	r30, 0xAB	; 171
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	91 83       	std	Z+1, r25	; 0x01
    167c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    167e:	a2 e3       	ldi	r26, 0x32	; 50
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e2 e3       	ldi	r30, 0x32	; 50
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	80 64       	ori	r24, 0x40	; 64
    168a:	8c 93       	st	X, r24
    168c:	fe 01       	movw	r30, r28
    168e:	ef 5a       	subi	r30, 0xAF	; 175
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a0 e8       	ldi	r26, 0x80	; 128
    1698:	bf e3       	ldi	r27, 0x3F	; 63
    169a:	80 83       	st	Z, r24
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	a2 83       	std	Z+2, r26	; 0x02
    16a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a2:	8e 01       	movw	r16, r28
    16a4:	03 5b       	subi	r16, 0xB3	; 179
    16a6:	1f 4f       	sbci	r17, 0xFF	; 255
    16a8:	fe 01       	movw	r30, r28
    16aa:	ef 5a       	subi	r30, 0xAF	; 175
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
    16b2:	82 81       	ldd	r24, Z+2	; 0x02
    16b4:	93 81       	ldd	r25, Z+3	; 0x03
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	4a ef       	ldi	r20, 0xFA	; 250
    16bc:	54 e4       	ldi	r21, 0x44	; 68
    16be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	f8 01       	movw	r30, r16
    16c8:	80 83       	st	Z, r24
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	a2 83       	std	Z+2, r26	; 0x02
    16ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16d0:	fe 01       	movw	r30, r28
    16d2:	e3 5b       	subi	r30, 0xB3	; 179
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e8       	ldi	r20, 0x80	; 128
    16e4:	5f e3       	ldi	r21, 0x3F	; 63
    16e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ea:	88 23       	and	r24, r24
    16ec:	44 f4       	brge	.+16     	; 0x16fe <LCD_displayCharacter+0x224>
		__ticks = 1;
    16ee:	fe 01       	movw	r30, r28
    16f0:	e5 5b       	subi	r30, 0xB5	; 181
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24
    16fc:	64 c0       	rjmp	.+200    	; 0x17c6 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    16fe:	fe 01       	movw	r30, r28
    1700:	e3 5b       	subi	r30, 0xB3	; 179
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	60 81       	ld	r22, Z
    1706:	71 81       	ldd	r23, Z+1	; 0x01
    1708:	82 81       	ldd	r24, Z+2	; 0x02
    170a:	93 81       	ldd	r25, Z+3	; 0x03
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	3f ef       	ldi	r19, 0xFF	; 255
    1710:	4f e7       	ldi	r20, 0x7F	; 127
    1712:	57 e4       	ldi	r21, 0x47	; 71
    1714:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1718:	18 16       	cp	r1, r24
    171a:	0c f0       	brlt	.+2      	; 0x171e <LCD_displayCharacter+0x244>
    171c:	43 c0       	rjmp	.+134    	; 0x17a4 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171e:	fe 01       	movw	r30, r28
    1720:	ef 5a       	subi	r30, 0xAF	; 175
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	60 81       	ld	r22, Z
    1726:	71 81       	ldd	r23, Z+1	; 0x01
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	51 e4       	ldi	r21, 0x41	; 65
    1734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	8e 01       	movw	r16, r28
    173e:	05 5b       	subi	r16, 0xB5	; 181
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	f8 01       	movw	r30, r16
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	80 83       	st	Z, r24
    1754:	1f c0       	rjmp	.+62     	; 0x1794 <LCD_displayCharacter+0x2ba>
    1756:	fe 01       	movw	r30, r28
    1758:	e7 5b       	subi	r30, 0xB7	; 183
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	88 ec       	ldi	r24, 0xC8	; 200
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	80 83       	st	Z, r24
    1764:	fe 01       	movw	r30, r28
    1766:	e7 5b       	subi	r30, 0xB7	; 183
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	80 81       	ld	r24, Z
    176c:	91 81       	ldd	r25, Z+1	; 0x01
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <LCD_displayCharacter+0x294>
    1772:	fe 01       	movw	r30, r28
    1774:	e7 5b       	subi	r30, 0xB7	; 183
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177c:	de 01       	movw	r26, r28
    177e:	a5 5b       	subi	r26, 0xB5	; 181
    1780:	bf 4f       	sbci	r27, 0xFF	; 255
    1782:	fe 01       	movw	r30, r28
    1784:	e5 5b       	subi	r30, 0xB5	; 181
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	11 96       	adiw	r26, 0x01	; 1
    1790:	9c 93       	st	X, r25
    1792:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1794:	fe 01       	movw	r30, r28
    1796:	e5 5b       	subi	r30, 0xB5	; 181
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	80 81       	ld	r24, Z
    179c:	91 81       	ldd	r25, Z+1	; 0x01
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	d1 f6       	brne	.-76     	; 0x1756 <LCD_displayCharacter+0x27c>
    17a2:	27 c0       	rjmp	.+78     	; 0x17f2 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a4:	8e 01       	movw	r16, r28
    17a6:	05 5b       	subi	r16, 0xB5	; 181
    17a8:	1f 4f       	sbci	r17, 0xFF	; 255
    17aa:	fe 01       	movw	r30, r28
    17ac:	e3 5b       	subi	r30, 0xB3	; 179
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	60 81       	ld	r22, Z
    17b2:	71 81       	ldd	r23, Z+1	; 0x01
    17b4:	82 81       	ldd	r24, Z+2	; 0x02
    17b6:	93 81       	ldd	r25, Z+3	; 0x03
    17b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	f8 01       	movw	r30, r16
    17c2:	91 83       	std	Z+1, r25	; 0x01
    17c4:	80 83       	st	Z, r24
    17c6:	de 01       	movw	r26, r28
    17c8:	a9 5b       	subi	r26, 0xB9	; 185
    17ca:	bf 4f       	sbci	r27, 0xFF	; 255
    17cc:	fe 01       	movw	r30, r28
    17ce:	e5 5b       	subi	r30, 0xB5	; 181
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	80 81       	ld	r24, Z
    17d4:	91 81       	ldd	r25, Z+1	; 0x01
    17d6:	8d 93       	st	X+, r24
    17d8:	9c 93       	st	X, r25
    17da:	fe 01       	movw	r30, r28
    17dc:	e9 5b       	subi	r30, 0xB9	; 185
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 81       	ld	r24, Z
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <LCD_displayCharacter+0x30a>
    17e8:	fe 01       	movw	r30, r28
    17ea:	e9 5b       	subi	r30, 0xB9	; 185
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    17f2:	a5 e3       	ldi	r26, 0x35	; 53
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e5 e3       	ldi	r30, 0x35	; 53
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	98 2f       	mov	r25, r24
    17fe:	9f 70       	andi	r25, 0x0F	; 15
    1800:	fe 01       	movw	r30, r28
    1802:	ed 59       	subi	r30, 0x9D	; 157
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 81       	ld	r24, Z
    1808:	80 7f       	andi	r24, 0xF0	; 240
    180a:	89 2b       	or	r24, r25
    180c:	8c 93       	st	X, r24
    180e:	fe 01       	movw	r30, r28
    1810:	ed 5b       	subi	r30, 0xBD	; 189
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a0 e8       	ldi	r26, 0x80	; 128
    181a:	bf e3       	ldi	r27, 0x3F	; 63
    181c:	80 83       	st	Z, r24
    181e:	91 83       	std	Z+1, r25	; 0x01
    1820:	a2 83       	std	Z+2, r26	; 0x02
    1822:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1824:	8e 01       	movw	r16, r28
    1826:	01 5c       	subi	r16, 0xC1	; 193
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	fe 01       	movw	r30, r28
    182c:	ed 5b       	subi	r30, 0xBD	; 189
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	4a ef       	ldi	r20, 0xFA	; 250
    183e:	54 e4       	ldi	r21, 0x44	; 68
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	f8 01       	movw	r30, r16
    184a:	80 83       	st	Z, r24
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	a2 83       	std	Z+2, r26	; 0x02
    1850:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1852:	fe 01       	movw	r30, r28
    1854:	ff 96       	adiw	r30, 0x3f	; 63
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	82 81       	ldd	r24, Z+2	; 0x02
    185c:	93 81       	ldd	r25, Z+3	; 0x03
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e8       	ldi	r20, 0x80	; 128
    1864:	5f e3       	ldi	r21, 0x3F	; 63
    1866:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    186a:	88 23       	and	r24, r24
    186c:	2c f4       	brge	.+10     	; 0x1878 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9e af       	std	Y+62, r25	; 0x3e
    1874:	8d af       	std	Y+61, r24	; 0x3d
    1876:	46 c0       	rjmp	.+140    	; 0x1904 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    1878:	fe 01       	movw	r30, r28
    187a:	ff 96       	adiw	r30, 0x3f	; 63
    187c:	60 81       	ld	r22, Z
    187e:	71 81       	ldd	r23, Z+1	; 0x01
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	3f ef       	ldi	r19, 0xFF	; 255
    1888:	4f e7       	ldi	r20, 0x7F	; 127
    188a:	57 e4       	ldi	r21, 0x47	; 71
    188c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1890:	18 16       	cp	r1, r24
    1892:	64 f5       	brge	.+88     	; 0x18ec <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1894:	fe 01       	movw	r30, r28
    1896:	ed 5b       	subi	r30, 0xBD	; 189
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	82 81       	ldd	r24, Z+2	; 0x02
    18a0:	93 81       	ldd	r25, Z+3	; 0x03
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e2       	ldi	r20, 0x20	; 32
    18a8:	51 e4       	ldi	r21, 0x41	; 65
    18aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9e af       	std	Y+62, r25	; 0x3e
    18c0:	8d af       	std	Y+61, r24	; 0x3d
    18c2:	0f c0       	rjmp	.+30     	; 0x18e2 <LCD_displayCharacter+0x408>
    18c4:	88 ec       	ldi	r24, 0xC8	; 200
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	9c af       	std	Y+60, r25	; 0x3c
    18ca:	8b af       	std	Y+59, r24	; 0x3b
    18cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    18ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <LCD_displayCharacter+0x3f6>
    18d4:	9c af       	std	Y+60, r25	; 0x3c
    18d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    18da:	9e ad       	ldd	r25, Y+62	; 0x3e
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	9e af       	std	Y+62, r25	; 0x3e
    18e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    18e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	69 f7       	brne	.-38     	; 0x18c4 <LCD_displayCharacter+0x3ea>
    18ea:	16 c0       	rjmp	.+44     	; 0x1918 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ec:	fe 01       	movw	r30, r28
    18ee:	ff 96       	adiw	r30, 0x3f	; 63
    18f0:	60 81       	ld	r22, Z
    18f2:	71 81       	ldd	r23, Z+1	; 0x01
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9e af       	std	Y+62, r25	; 0x3e
    1902:	8d af       	std	Y+61, r24	; 0x3d
    1904:	8d ad       	ldd	r24, Y+61	; 0x3d
    1906:	9e ad       	ldd	r25, Y+62	; 0x3e
    1908:	9a af       	std	Y+58, r25	; 0x3a
    190a:	89 af       	std	Y+57, r24	; 0x39
    190c:	89 ad       	ldd	r24, Y+57	; 0x39
    190e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <LCD_displayCharacter+0x436>
    1914:	9a af       	std	Y+58, r25	; 0x3a
    1916:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1918:	a2 e3       	ldi	r26, 0x32	; 50
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e2 e3       	ldi	r30, 0x32	; 50
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	8f 7b       	andi	r24, 0xBF	; 191
    1924:	8c 93       	st	X, r24
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a0 e8       	ldi	r26, 0x80	; 128
    192c:	bf e3       	ldi	r27, 0x3F	; 63
    192e:	8d ab       	std	Y+53, r24	; 0x35
    1930:	9e ab       	std	Y+54, r25	; 0x36
    1932:	af ab       	std	Y+55, r26	; 0x37
    1934:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1936:	6d a9       	ldd	r22, Y+53	; 0x35
    1938:	7e a9       	ldd	r23, Y+54	; 0x36
    193a:	8f a9       	ldd	r24, Y+55	; 0x37
    193c:	98 ad       	ldd	r25, Y+56	; 0x38
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	4a ef       	ldi	r20, 0xFA	; 250
    1944:	54 e4       	ldi	r21, 0x44	; 68
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	89 ab       	std	Y+49, r24	; 0x31
    1950:	9a ab       	std	Y+50, r25	; 0x32
    1952:	ab ab       	std	Y+51, r26	; 0x33
    1954:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1956:	69 a9       	ldd	r22, Y+49	; 0x31
    1958:	7a a9       	ldd	r23, Y+50	; 0x32
    195a:	8b a9       	ldd	r24, Y+51	; 0x33
    195c:	9c a9       	ldd	r25, Y+52	; 0x34
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    196a:	88 23       	and	r24, r24
    196c:	2c f4       	brge	.+10     	; 0x1978 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	98 ab       	std	Y+48, r25	; 0x30
    1974:	8f a7       	std	Y+47, r24	; 0x2f
    1976:	3f c0       	rjmp	.+126    	; 0x19f6 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1978:	69 a9       	ldd	r22, Y+49	; 0x31
    197a:	7a a9       	ldd	r23, Y+50	; 0x32
    197c:	8b a9       	ldd	r24, Y+51	; 0x33
    197e:	9c a9       	ldd	r25, Y+52	; 0x34
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	3f ef       	ldi	r19, 0xFF	; 255
    1984:	4f e7       	ldi	r20, 0x7F	; 127
    1986:	57 e4       	ldi	r21, 0x47	; 71
    1988:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    198c:	18 16       	cp	r1, r24
    198e:	4c f5       	brge	.+82     	; 0x19e2 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1990:	6d a9       	ldd	r22, Y+53	; 0x35
    1992:	7e a9       	ldd	r23, Y+54	; 0x36
    1994:	8f a9       	ldd	r24, Y+55	; 0x37
    1996:	98 ad       	ldd	r25, Y+56	; 0x38
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	51 e4       	ldi	r21, 0x41	; 65
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	98 ab       	std	Y+48, r25	; 0x30
    19b6:	8f a7       	std	Y+47, r24	; 0x2f
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <LCD_displayCharacter+0x4fe>
    19ba:	88 ec       	ldi	r24, 0xC8	; 200
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	9e a7       	std	Y+46, r25	; 0x2e
    19c0:	8d a7       	std	Y+45, r24	; 0x2d
    19c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    19c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <LCD_displayCharacter+0x4ec>
    19ca:	9e a7       	std	Y+46, r25	; 0x2e
    19cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d0:	98 a9       	ldd	r25, Y+48	; 0x30
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	98 ab       	std	Y+48, r25	; 0x30
    19d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19da:	98 a9       	ldd	r25, Y+48	; 0x30
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	69 f7       	brne	.-38     	; 0x19ba <LCD_displayCharacter+0x4e0>
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e2:	69 a9       	ldd	r22, Y+49	; 0x31
    19e4:	7a a9       	ldd	r23, Y+50	; 0x32
    19e6:	8b a9       	ldd	r24, Y+51	; 0x33
    19e8:	9c a9       	ldd	r25, Y+52	; 0x34
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	98 ab       	std	Y+48, r25	; 0x30
    19f4:	8f a7       	std	Y+47, r24	; 0x2f
    19f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f8:	98 a9       	ldd	r25, Y+48	; 0x30
    19fa:	9c a7       	std	Y+44, r25	; 0x2c
    19fc:	8b a7       	std	Y+43, r24	; 0x2b
    19fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a00:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <LCD_displayCharacter+0x528>
    1a06:	9c a7       	std	Y+44, r25	; 0x2c
    1a08:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1a0a:	a2 e3       	ldi	r26, 0x32	; 50
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e2 e3       	ldi	r30, 0x32	; 50
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	80 64       	ori	r24, 0x40	; 64
    1a16:	8c 93       	st	X, r24
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	a0 e8       	ldi	r26, 0x80	; 128
    1a1e:	bf e3       	ldi	r27, 0x3F	; 63
    1a20:	8f a3       	std	Y+39, r24	; 0x27
    1a22:	98 a7       	std	Y+40, r25	; 0x28
    1a24:	a9 a7       	std	Y+41, r26	; 0x29
    1a26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a28:	6f a1       	ldd	r22, Y+39	; 0x27
    1a2a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a2c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	4a ef       	ldi	r20, 0xFA	; 250
    1a36:	54 e4       	ldi	r21, 0x44	; 68
    1a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	8b a3       	std	Y+35, r24	; 0x23
    1a42:	9c a3       	std	Y+36, r25	; 0x24
    1a44:	ad a3       	std	Y+37, r26	; 0x25
    1a46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a48:	6b a1       	ldd	r22, Y+35	; 0x23
    1a4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e8       	ldi	r20, 0x80	; 128
    1a56:	5f e3       	ldi	r21, 0x3F	; 63
    1a58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a5c:	88 23       	and	r24, r24
    1a5e:	2c f4       	brge	.+10     	; 0x1a6a <LCD_displayCharacter+0x590>
		__ticks = 1;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	9a a3       	std	Y+34, r25	; 0x22
    1a66:	89 a3       	std	Y+33, r24	; 0x21
    1a68:	3f c0       	rjmp	.+126    	; 0x1ae8 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a70:	9e a1       	ldd	r25, Y+38	; 0x26
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	3f ef       	ldi	r19, 0xFF	; 255
    1a76:	4f e7       	ldi	r20, 0x7F	; 127
    1a78:	57 e4       	ldi	r21, 0x47	; 71
    1a7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a7e:	18 16       	cp	r1, r24
    1a80:	4c f5       	brge	.+82     	; 0x1ad4 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a82:	6f a1       	ldd	r22, Y+39	; 0x27
    1a84:	78 a5       	ldd	r23, Y+40	; 0x28
    1a86:	89 a5       	ldd	r24, Y+41	; 0x29
    1a88:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e2       	ldi	r20, 0x20	; 32
    1a90:	51 e4       	ldi	r21, 0x41	; 65
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	bc 01       	movw	r22, r24
    1a9c:	cd 01       	movw	r24, r26
    1a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9a a3       	std	Y+34, r25	; 0x22
    1aa8:	89 a3       	std	Y+33, r24	; 0x21
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <LCD_displayCharacter+0x5f0>
    1aac:	88 ec       	ldi	r24, 0xC8	; 200
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	98 a3       	std	Y+32, r25	; 0x20
    1ab2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ab4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ab6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <LCD_displayCharacter+0x5de>
    1abc:	98 a3       	std	Y+32, r25	; 0x20
    1abe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	9a a3       	std	Y+34, r25	; 0x22
    1ac8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aca:	89 a1       	ldd	r24, Y+33	; 0x21
    1acc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	69 f7       	brne	.-38     	; 0x1aac <LCD_displayCharacter+0x5d2>
    1ad2:	14 c0       	rjmp	.+40     	; 0x1afc <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad8:	8d a1       	ldd	r24, Y+37	; 0x25
    1ada:	9e a1       	ldd	r25, Y+38	; 0x26
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9a a3       	std	Y+34, r25	; 0x22
    1ae6:	89 a3       	std	Y+33, r24	; 0x21
    1ae8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aea:	9a a1       	ldd	r25, Y+34	; 0x22
    1aec:	9e 8f       	std	Y+30, r25	; 0x1e
    1aee:	8d 8f       	std	Y+29, r24	; 0x1d
    1af0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <LCD_displayCharacter+0x61a>
    1af8:	9e 8f       	std	Y+30, r25	; 0x1e
    1afa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    1afc:	a5 e3       	ldi	r26, 0x35	; 53
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e5 e3       	ldi	r30, 0x35	; 53
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	28 2f       	mov	r18, r24
    1b08:	2f 70       	andi	r18, 0x0F	; 15
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	ed 59       	subi	r30, 0x9D	; 157
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 81       	ld	r24, Z
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	82 95       	swap	r24
    1b18:	92 95       	swap	r25
    1b1a:	90 7f       	andi	r25, 0xF0	; 240
    1b1c:	98 27       	eor	r25, r24
    1b1e:	80 7f       	andi	r24, 0xF0	; 240
    1b20:	98 27       	eor	r25, r24
    1b22:	82 2b       	or	r24, r18
    1b24:	8c 93       	st	X, r24
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a0 e8       	ldi	r26, 0x80	; 128
    1b2c:	bf e3       	ldi	r27, 0x3F	; 63
    1b2e:	89 8f       	std	Y+25, r24	; 0x19
    1b30:	9a 8f       	std	Y+26, r25	; 0x1a
    1b32:	ab 8f       	std	Y+27, r26	; 0x1b
    1b34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b36:	69 8d       	ldd	r22, Y+25	; 0x19
    1b38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4a ef       	ldi	r20, 0xFA	; 250
    1b44:	54 e4       	ldi	r21, 0x44	; 68
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8d 8b       	std	Y+21, r24	; 0x15
    1b50:	9e 8b       	std	Y+22, r25	; 0x16
    1b52:	af 8b       	std	Y+23, r26	; 0x17
    1b54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b56:	6d 89       	ldd	r22, Y+21	; 0x15
    1b58:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e8       	ldi	r20, 0x80	; 128
    1b64:	5f e3       	ldi	r21, 0x3F	; 63
    1b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b6a:	88 23       	and	r24, r24
    1b6c:	2c f4       	brge	.+10     	; 0x1b78 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9c 8b       	std	Y+20, r25	; 0x14
    1b74:	8b 8b       	std	Y+19, r24	; 0x13
    1b76:	3f c0       	rjmp	.+126    	; 0x1bf6 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    1b78:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	3f ef       	ldi	r19, 0xFF	; 255
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	4c f5       	brge	.+82     	; 0x1be2 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b90:	69 8d       	ldd	r22, Y+25	; 0x19
    1b92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e2       	ldi	r20, 0x20	; 32
    1b9e:	51 e4       	ldi	r21, 0x41	; 65
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9c 8b       	std	Y+20, r25	; 0x14
    1bb6:	8b 8b       	std	Y+19, r24	; 0x13
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <LCD_displayCharacter+0x6fe>
    1bba:	88 ec       	ldi	r24, 0xC8	; 200
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	9a 8b       	std	Y+18, r25	; 0x12
    1bc0:	89 8b       	std	Y+17, r24	; 0x11
    1bc2:	89 89       	ldd	r24, Y+17	; 0x11
    1bc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <LCD_displayCharacter+0x6ec>
    1bca:	9a 8b       	std	Y+18, r25	; 0x12
    1bcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bce:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	9c 8b       	std	Y+20, r25	; 0x14
    1bd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bda:	9c 89       	ldd	r25, Y+20	; 0x14
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	69 f7       	brne	.-38     	; 0x1bba <LCD_displayCharacter+0x6e0>
    1be0:	14 c0       	rjmp	.+40     	; 0x1c0a <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be2:	6d 89       	ldd	r22, Y+21	; 0x15
    1be4:	7e 89       	ldd	r23, Y+22	; 0x16
    1be6:	8f 89       	ldd	r24, Y+23	; 0x17
    1be8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9c 8b       	std	Y+20, r25	; 0x14
    1bf4:	8b 8b       	std	Y+19, r24	; 0x13
    1bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfa:	98 8b       	std	Y+16, r25	; 0x10
    1bfc:	8f 87       	std	Y+15, r24	; 0x0f
    1bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c00:	98 89       	ldd	r25, Y+16	; 0x10
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <LCD_displayCharacter+0x728>
    1c06:	98 8b       	std	Y+16, r25	; 0x10
    1c08:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1c0a:	a2 e3       	ldi	r26, 0x32	; 50
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e2 e3       	ldi	r30, 0x32	; 50
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	8f 7b       	andi	r24, 0xBF	; 191
    1c16:	8c 93       	st	X, r24
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a0 e8       	ldi	r26, 0x80	; 128
    1c1e:	bf e3       	ldi	r27, 0x3F	; 63
    1c20:	8b 87       	std	Y+11, r24	; 0x0b
    1c22:	9c 87       	std	Y+12, r25	; 0x0c
    1c24:	ad 87       	std	Y+13, r26	; 0x0d
    1c26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	4a ef       	ldi	r20, 0xFA	; 250
    1c36:	54 e4       	ldi	r21, 0x44	; 68
    1c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	8f 83       	std	Y+7, r24	; 0x07
    1c42:	98 87       	std	Y+8, r25	; 0x08
    1c44:	a9 87       	std	Y+9, r26	; 0x09
    1c46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c48:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4a:	78 85       	ldd	r23, Y+8	; 0x08
    1c4c:	89 85       	ldd	r24, Y+9	; 0x09
    1c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e8       	ldi	r20, 0x80	; 128
    1c56:	5f e3       	ldi	r21, 0x3F	; 63
    1c58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5c:	88 23       	and	r24, r24
    1c5e:	2c f4       	brge	.+10     	; 0x1c6a <LCD_displayCharacter+0x790>
		__ticks = 1;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	3f c0       	rjmp	.+126    	; 0x1ce8 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    1c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6c:	78 85       	ldd	r23, Y+8	; 0x08
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	3f ef       	ldi	r19, 0xFF	; 255
    1c76:	4f e7       	ldi	r20, 0x7F	; 127
    1c78:	57 e4       	ldi	r21, 0x47	; 71
    1c7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c7e:	18 16       	cp	r1, r24
    1c80:	4c f5       	brge	.+82     	; 0x1cd4 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e2       	ldi	r20, 0x20	; 32
    1c90:	51 e4       	ldi	r21, 0x41	; 65
    1c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	0f c0       	rjmp	.+30     	; 0x1cca <LCD_displayCharacter+0x7f0>
    1cac:	88 ec       	ldi	r24, 0xC8	; 200
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9c 83       	std	Y+4, r25	; 0x04
    1cb2:	8b 83       	std	Y+3, r24	; 0x03
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <LCD_displayCharacter+0x7de>
    1cbc:	9c 83       	std	Y+4, r25	; 0x04
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	69 f7       	brne	.-38     	; 0x1cac <LCD_displayCharacter+0x7d2>
    1cd2:	14 c0       	rjmp	.+40     	; 0x1cfc <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd6:	78 85       	ldd	r23, Y+8	; 0x08
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <LCD_displayCharacter+0x81a>
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1cfc:	cd 59       	subi	r28, 0x9D	; 157
    1cfe:	df 4f       	sbci	r29, 0xFF	; 255
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	1f 91       	pop	r17
    1d10:	0f 91       	pop	r16
    1d12:	08 95       	ret

00001d14 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	00 d0       	rcall	.+0      	; 0x1d1a <LCD_displayString+0x6>
    1d1a:	0f 92       	push	r0
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	9b 83       	std	Y+3, r25	; 0x03
    1d22:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d24:	19 82       	std	Y+1, r1	; 0x01
    1d26:	0e c0       	rjmp	.+28     	; 0x1d44 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	9b 81       	ldd	r25, Y+3	; 0x03
    1d32:	fc 01       	movw	r30, r24
    1d34:	e2 0f       	add	r30, r18
    1d36:	f3 1f       	adc	r31, r19
    1d38:	80 81       	ld	r24, Z
    1d3a:	0e 94 6d 0a 	call	0x14da	; 0x14da <LCD_displayCharacter>
		i++;
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	8f 5f       	subi	r24, 0xFF	; 255
    1d42:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4e:	fc 01       	movw	r30, r24
    1d50:	e2 0f       	add	r30, r18
    1d52:	f3 1f       	adc	r31, r19
    1d54:	80 81       	ld	r24, Z
    1d56:	88 23       	and	r24, r24
    1d58:	39 f7       	brne	.-50     	; 0x1d28 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <LCD_goToRowColumn+0x6>
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <LCD_goToRowColumn+0x8>
    1d6e:	0f 92       	push	r0
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	8a 83       	std	Y+2, r24	; 0x02
    1d76:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	3d 83       	std	Y+5, r19	; 0x05
    1d80:	2c 83       	std	Y+4, r18	; 0x04
    1d82:	8c 81       	ldd	r24, Y+4	; 0x04
    1d84:	9d 81       	ldd	r25, Y+5	; 0x05
    1d86:	81 30       	cpi	r24, 0x01	; 1
    1d88:	91 05       	cpc	r25, r1
    1d8a:	c1 f0       	breq	.+48     	; 0x1dbc <LCD_goToRowColumn+0x56>
    1d8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d90:	22 30       	cpi	r18, 0x02	; 2
    1d92:	31 05       	cpc	r19, r1
    1d94:	2c f4       	brge	.+10     	; 0x1da0 <LCD_goToRowColumn+0x3a>
    1d96:	8c 81       	ldd	r24, Y+4	; 0x04
    1d98:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	61 f0       	breq	.+24     	; 0x1db6 <LCD_goToRowColumn+0x50>
    1d9e:	19 c0       	rjmp	.+50     	; 0x1dd2 <LCD_goToRowColumn+0x6c>
    1da0:	2c 81       	ldd	r18, Y+4	; 0x04
    1da2:	3d 81       	ldd	r19, Y+5	; 0x05
    1da4:	22 30       	cpi	r18, 0x02	; 2
    1da6:	31 05       	cpc	r19, r1
    1da8:	69 f0       	breq	.+26     	; 0x1dc4 <LCD_goToRowColumn+0x5e>
    1daa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dac:	9d 81       	ldd	r25, Y+5	; 0x05
    1dae:	83 30       	cpi	r24, 0x03	; 3
    1db0:	91 05       	cpc	r25, r1
    1db2:	61 f0       	breq	.+24     	; 0x1dcc <LCD_goToRowColumn+0x66>
    1db4:	0e c0       	rjmp	.+28     	; 0x1dd2 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	0b c0       	rjmp	.+22     	; 0x1dd2 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	80 5c       	subi	r24, 0xC0	; 192
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	07 c0       	rjmp	.+14     	; 0x1dd2 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	80 5f       	subi	r24, 0xF0	; 240
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	03 c0       	rjmp	.+6      	; 0x1dd2 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	80 5b       	subi	r24, 0xB0	; 176
    1dd0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	80 68       	ori	r24, 0x80	; 128
    1dd6:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <LCD_displayStringRowColumn+0x6>
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <LCD_displayStringRowColumn+0x8>
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	6a 83       	std	Y+2, r22	; 0x02
    1dfa:	5c 83       	std	Y+4, r21	; 0x04
    1dfc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	6a 81       	ldd	r22, Y+2	; 0x02
    1e02:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
}
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	62 97       	sbiw	r28, 0x12	; 18
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	9a 8b       	std	Y+18, r25	; 0x12
    1e32:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1e34:	89 89       	ldd	r24, Y+17	; 0x11
    1e36:	9a 89       	ldd	r25, Y+18	; 0x12
    1e38:	9e 01       	movw	r18, r28
    1e3a:	2f 5f       	subi	r18, 0xFF	; 255
    1e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3e:	b9 01       	movw	r22, r18
    1e40:	4a e0       	ldi	r20, 0x0A	; 10
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <itoa>
   LCD_displayString(buff);
    1e48:	ce 01       	movw	r24, r28
    1e4a:	01 96       	adiw	r24, 0x01	; 1
    1e4c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
}
    1e50:	62 96       	adiw	r28, 0x12	; 18
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_sendCommand>
}
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <Timer0_Tick>:

#define READY 0x01

uint16 Tick=0;

void Timer0_Tick(void){
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
	Tick++;
    1e7e:	80 91 28 01 	lds	r24, 0x0128
    1e82:	90 91 29 01 	lds	r25, 0x0129
    1e86:	01 96       	adiw	r24, 0x01	; 1
    1e88:	90 93 29 01 	sts	0x0129, r25
    1e8c:	80 93 28 01 	sts	0x0128, r24
}
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <Password_init>:

void Password_init(uint8 *key){
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	a0 97       	sbiw	r28, 0x20	; 32
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	98 a3       	std	Y+32, r25	; 0x20
    1eac:	8f 8f       	std	Y+31, r24	; 0x1f
	LCD_clearScreen();
    1eae:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_clearScreen>
	uint8 count=0,check_numb=0;
    1eb2:	1e 8e       	std	Y+30, r1	; 0x1e
    1eb4:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_displayString("Please Enter New");
    1eb6:	80 e6       	ldi	r24, 0x60	; 96
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LCD_goToRowColumn>
	LCD_displayString("Password:");
    1ec6:	81 e7       	ldi	r24, 0x71	; 113
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
	for(count=0;count<5;count++){
    1ece:	1e 8e       	std	Y+30, r1	; 0x1e
    1ed0:	11 c1       	rjmp	.+546    	; 0x20f4 <Password_init+0x25e>
		check_numb=KeyPad_getPressedKey();
    1ed2:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1ed6:	8d 8f       	std	Y+29, r24	; 0x1d
		if(check_numb<=9&&check_numb>=0){
    1ed8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eda:	8a 30       	cpi	r24, 0x0A	; 10
    1edc:	08 f0       	brcs	.+2      	; 0x1ee0 <Password_init+0x4a>
    1ede:	80 c0       	rjmp	.+256    	; 0x1fe0 <Password_init+0x14a>
			key[count]=check_numb;
    1ee0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ee8:	98 a1       	ldd	r25, Y+32	; 0x20
    1eea:	fc 01       	movw	r30, r24
    1eec:	e2 0f       	add	r30, r18
    1eee:	f3 1f       	adc	r31, r19
    1ef0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ef2:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    1ef4:	8a e2       	ldi	r24, 0x2A	; 42
    1ef6:	0e 94 6d 0a 	call	0x14da	; 0x14da <LCD_displayCharacter>
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a6 e9       	ldi	r26, 0x96	; 150
    1f00:	b3 e4       	ldi	r27, 0x43	; 67
    1f02:	89 8f       	std	Y+25, r24	; 0x19
    1f04:	9a 8f       	std	Y+26, r25	; 0x1a
    1f06:	ab 8f       	std	Y+27, r26	; 0x1b
    1f08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	4a ef       	ldi	r20, 0xFA	; 250
    1f18:	54 e4       	ldi	r21, 0x44	; 68
    1f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	8d 8b       	std	Y+21, r24	; 0x15
    1f24:	9e 8b       	std	Y+22, r25	; 0x16
    1f26:	af 8b       	std	Y+23, r26	; 0x17
    1f28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f30:	98 8d       	ldd	r25, Y+24	; 0x18
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e8       	ldi	r20, 0x80	; 128
    1f38:	5f e3       	ldi	r21, 0x3F	; 63
    1f3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3e:	88 23       	and	r24, r24
    1f40:	2c f4       	brge	.+10     	; 0x1f4c <Password_init+0xb6>
		__ticks = 1;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	9c 8b       	std	Y+20, r25	; 0x14
    1f48:	8b 8b       	std	Y+19, r24	; 0x13
    1f4a:	3f c0       	rjmp	.+126    	; 0x1fca <Password_init+0x134>
	else if (__tmp > 65535)
    1f4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f50:	8f 89       	ldd	r24, Y+23	; 0x17
    1f52:	98 8d       	ldd	r25, Y+24	; 0x18
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	3f ef       	ldi	r19, 0xFF	; 255
    1f58:	4f e7       	ldi	r20, 0x7F	; 127
    1f5a:	57 e4       	ldi	r21, 0x47	; 71
    1f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f60:	18 16       	cp	r1, r24
    1f62:	4c f5       	brge	.+82     	; 0x1fb6 <Password_init+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f64:	69 8d       	ldd	r22, Y+25	; 0x19
    1f66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e2       	ldi	r20, 0x20	; 32
    1f72:	51 e4       	ldi	r21, 0x41	; 65
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	cd 01       	movw	r24, r26
    1f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	9c 8b       	std	Y+20, r25	; 0x14
    1f8a:	8b 8b       	std	Y+19, r24	; 0x13
    1f8c:	0f c0       	rjmp	.+30     	; 0x1fac <Password_init+0x116>
    1f8e:	88 ec       	ldi	r24, 0xC8	; 200
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	9a 8b       	std	Y+18, r25	; 0x12
    1f94:	89 8b       	std	Y+17, r24	; 0x11
    1f96:	89 89       	ldd	r24, Y+17	; 0x11
    1f98:	9a 89       	ldd	r25, Y+18	; 0x12
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <Password_init+0x104>
    1f9e:	9a 8b       	std	Y+18, r25	; 0x12
    1fa0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	9c 8b       	std	Y+20, r25	; 0x14
    1faa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fac:	8b 89       	ldd	r24, Y+19	; 0x13
    1fae:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	69 f7       	brne	.-38     	; 0x1f8e <Password_init+0xf8>
    1fb4:	9c c0       	rjmp	.+312    	; 0x20ee <Password_init+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fba:	8f 89       	ldd	r24, Y+23	; 0x17
    1fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9c 8b       	std	Y+20, r25	; 0x14
    1fc8:	8b 8b       	std	Y+19, r24	; 0x13
    1fca:	8b 89       	ldd	r24, Y+19	; 0x13
    1fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fce:	98 8b       	std	Y+16, r25	; 0x10
    1fd0:	8f 87       	std	Y+15, r24	; 0x0f
    1fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd4:	98 89       	ldd	r25, Y+16	; 0x10
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <Password_init+0x140>
    1fda:	98 8b       	std	Y+16, r25	; 0x10
    1fdc:	8f 87       	std	Y+15, r24	; 0x0f
    1fde:	87 c0       	rjmp	.+270    	; 0x20ee <Password_init+0x258>
			_delay_ms(300);
		}else{
			LCD_clearScreen();
    1fe0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_clearScreen>
			LCD_displayString("Please Enter Five Numbs!");
    1fe4:	8b e7       	ldi	r24, 0x7B	; 123
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	aa ef       	ldi	r26, 0xFA	; 250
    1ff2:	b3 e4       	ldi	r27, 0x43	; 67
    1ff4:	8b 87       	std	Y+11, r24	; 0x0b
    1ff6:	9c 87       	std	Y+12, r25	; 0x0c
    1ff8:	ad 87       	std	Y+13, r26	; 0x0d
    1ffa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2000:	8d 85       	ldd	r24, Y+13	; 0x0d
    2002:	9e 85       	ldd	r25, Y+14	; 0x0e
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4a ef       	ldi	r20, 0xFA	; 250
    200a:	54 e4       	ldi	r21, 0x44	; 68
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8f 83       	std	Y+7, r24	; 0x07
    2016:	98 87       	std	Y+8, r25	; 0x08
    2018:	a9 87       	std	Y+9, r26	; 0x09
    201a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201c:	6f 81       	ldd	r22, Y+7	; 0x07
    201e:	78 85       	ldd	r23, Y+8	; 0x08
    2020:	89 85       	ldd	r24, Y+9	; 0x09
    2022:	9a 85       	ldd	r25, Y+10	; 0x0a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f e3       	ldi	r21, 0x3F	; 63
    202c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2030:	88 23       	and	r24, r24
    2032:	2c f4       	brge	.+10     	; 0x203e <Password_init+0x1a8>
		__ticks = 1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9e 83       	std	Y+6, r25	; 0x06
    203a:	8d 83       	std	Y+5, r24	; 0x05
    203c:	3f c0       	rjmp	.+126    	; 0x20bc <Password_init+0x226>
	else if (__tmp > 65535)
    203e:	6f 81       	ldd	r22, Y+7	; 0x07
    2040:	78 85       	ldd	r23, Y+8	; 0x08
    2042:	89 85       	ldd	r24, Y+9	; 0x09
    2044:	9a 85       	ldd	r25, Y+10	; 0x0a
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	3f ef       	ldi	r19, 0xFF	; 255
    204a:	4f e7       	ldi	r20, 0x7F	; 127
    204c:	57 e4       	ldi	r21, 0x47	; 71
    204e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2052:	18 16       	cp	r1, r24
    2054:	4c f5       	brge	.+82     	; 0x20a8 <Password_init+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2056:	6b 85       	ldd	r22, Y+11	; 0x0b
    2058:	7c 85       	ldd	r23, Y+12	; 0x0c
    205a:	8d 85       	ldd	r24, Y+13	; 0x0d
    205c:	9e 85       	ldd	r25, Y+14	; 0x0e
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e2       	ldi	r20, 0x20	; 32
    2064:	51 e4       	ldi	r21, 0x41	; 65
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	0f c0       	rjmp	.+30     	; 0x209e <Password_init+0x208>
    2080:	88 ec       	ldi	r24, 0xC8	; 200
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9c 83       	std	Y+4, r25	; 0x04
    2086:	8b 83       	std	Y+3, r24	; 0x03
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <Password_init+0x1f6>
    2090:	9c 83       	std	Y+4, r25	; 0x04
    2092:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
    2096:	9e 81       	ldd	r25, Y+6	; 0x06
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	9e 83       	std	Y+6, r25	; 0x06
    209c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	69 f7       	brne	.-38     	; 0x2080 <Password_init+0x1ea>
    20a6:	14 c0       	rjmp	.+40     	; 0x20d0 <Password_init+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a8:	6f 81       	ldd	r22, Y+7	; 0x07
    20aa:	78 85       	ldd	r23, Y+8	; 0x08
    20ac:	89 85       	ldd	r24, Y+9	; 0x09
    20ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
    20bc:	8d 81       	ldd	r24, Y+5	; 0x05
    20be:	9e 81       	ldd	r25, Y+6	; 0x06
    20c0:	9a 83       	std	Y+2, r25	; 0x02
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	9a 81       	ldd	r25, Y+2	; 0x02
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <Password_init+0x232>
    20cc:	9a 83       	std	Y+2, r25	; 0x02
    20ce:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_clearScreen();
    20d0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_clearScreen>
			LCD_displayString("Please Enter New");
    20d4:	80 e6       	ldi	r24, 0x60	; 96
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
			LCD_goToRowColumn(1,0);
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LCD_goToRowColumn>
			LCD_displayString("Password:");
    20e4:	81 e7       	ldi	r24, 0x71	; 113
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
			count=0;
    20ec:	1e 8e       	std	Y+30, r1	; 0x1e
	LCD_clearScreen();
	uint8 count=0,check_numb=0;
	LCD_displayString("Please Enter New");
	LCD_goToRowColumn(1,0);
	LCD_displayString("Password:");
	for(count=0;count<5;count++){
    20ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20f0:	8f 5f       	subi	r24, 0xFF	; 255
    20f2:	8e 8f       	std	Y+30, r24	; 0x1e
    20f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20f6:	85 30       	cpi	r24, 0x05	; 5
    20f8:	08 f4       	brcc	.+2      	; 0x20fc <Password_init+0x266>
    20fa:	eb ce       	rjmp	.-554    	; 0x1ed2 <Password_init+0x3c>
			LCD_goToRowColumn(1,0);
			LCD_displayString("Password:");
			count=0;
		}
	}
}
    20fc:	a0 96       	adiw	r28, 0x20	; 32
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <Take_Password>:

void Take_Password(uint8 *key){
    210e:	0f 93       	push	r16
    2110:	1f 93       	push	r17
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	61 97       	sbiw	r28, 0x11	; 17
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	99 8b       	std	Y+17, r25	; 0x11
    2128:	88 8b       	std	Y+16, r24	; 0x10
	uint8 count=0;
    212a:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clearScreen();
    212c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_clearScreen>
	LCD_displayString("Please Enter");
    2130:	84 e9       	ldi	r24, 0x94	; 148
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LCD_goToRowColumn>
	LCD_displayString("Password:");
    2140:	81 e7       	ldi	r24, 0x71	; 113
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
	for(count=0;count<5;count++){
    2148:	1f 86       	std	Y+15, r1	; 0x0f
    214a:	84 c0       	rjmp	.+264    	; 0x2254 <Take_Password+0x146>
		key[count]=KeyPad_getPressedKey();
    214c:	8f 85       	ldd	r24, Y+15	; 0x0f
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	88 89       	ldd	r24, Y+16	; 0x10
    2154:	99 89       	ldd	r25, Y+17	; 0x11
    2156:	8c 01       	movw	r16, r24
    2158:	02 0f       	add	r16, r18
    215a:	13 1f       	adc	r17, r19
    215c:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2160:	f8 01       	movw	r30, r16
    2162:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    2164:	8a e2       	ldi	r24, 0x2A	; 42
    2166:	0e 94 6d 0a 	call	0x14da	; 0x14da <LCD_displayCharacter>
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	a6 e9       	ldi	r26, 0x96	; 150
    2170:	b3 e4       	ldi	r27, 0x43	; 67
    2172:	8b 87       	std	Y+11, r24	; 0x0b
    2174:	9c 87       	std	Y+12, r25	; 0x0c
    2176:	ad 87       	std	Y+13, r26	; 0x0d
    2178:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217a:	6b 85       	ldd	r22, Y+11	; 0x0b
    217c:	7c 85       	ldd	r23, Y+12	; 0x0c
    217e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2180:	9e 85       	ldd	r25, Y+14	; 0x0e
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	4a ef       	ldi	r20, 0xFA	; 250
    2188:	54 e4       	ldi	r21, 0x44	; 68
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	8f 83       	std	Y+7, r24	; 0x07
    2194:	98 87       	std	Y+8, r25	; 0x08
    2196:	a9 87       	std	Y+9, r26	; 0x09
    2198:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    219a:	6f 81       	ldd	r22, Y+7	; 0x07
    219c:	78 85       	ldd	r23, Y+8	; 0x08
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e8       	ldi	r20, 0x80	; 128
    21a8:	5f e3       	ldi	r21, 0x3F	; 63
    21aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ae:	88 23       	and	r24, r24
    21b0:	2c f4       	brge	.+10     	; 0x21bc <Take_Password+0xae>
		__ticks = 1;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
    21ba:	3f c0       	rjmp	.+126    	; 0x223a <Take_Password+0x12c>
	else if (__tmp > 65535)
    21bc:	6f 81       	ldd	r22, Y+7	; 0x07
    21be:	78 85       	ldd	r23, Y+8	; 0x08
    21c0:	89 85       	ldd	r24, Y+9	; 0x09
    21c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	3f ef       	ldi	r19, 0xFF	; 255
    21c8:	4f e7       	ldi	r20, 0x7F	; 127
    21ca:	57 e4       	ldi	r21, 0x47	; 71
    21cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d0:	18 16       	cp	r1, r24
    21d2:	4c f5       	brge	.+82     	; 0x2226 <Take_Password+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21da:	9e 85       	ldd	r25, Y+14	; 0x0e
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e2       	ldi	r20, 0x20	; 32
    21e2:	51 e4       	ldi	r21, 0x41	; 65
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9e 83       	std	Y+6, r25	; 0x06
    21fa:	8d 83       	std	Y+5, r24	; 0x05
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <Take_Password+0x10e>
    21fe:	88 ec       	ldi	r24, 0xC8	; 200
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	9c 83       	std	Y+4, r25	; 0x04
    2204:	8b 83       	std	Y+3, r24	; 0x03
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <Take_Password+0xfc>
    220e:	9c 83       	std	Y+4, r25	; 0x04
    2210:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2212:	8d 81       	ldd	r24, Y+5	; 0x05
    2214:	9e 81       	ldd	r25, Y+6	; 0x06
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	69 f7       	brne	.-38     	; 0x21fe <Take_Password+0xf0>
    2224:	14 c0       	rjmp	.+40     	; 0x224e <Take_Password+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2226:	6f 81       	ldd	r22, Y+7	; 0x07
    2228:	78 85       	ldd	r23, Y+8	; 0x08
    222a:	89 85       	ldd	r24, Y+9	; 0x09
    222c:	9a 85       	ldd	r25, Y+10	; 0x0a
    222e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	9e 83       	std	Y+6, r25	; 0x06
    2238:	8d 83       	std	Y+5, r24	; 0x05
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	9e 81       	ldd	r25, Y+6	; 0x06
    223e:	9a 83       	std	Y+2, r25	; 0x02
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <Take_Password+0x138>
    224a:	9a 83       	std	Y+2, r25	; 0x02
    224c:	89 83       	std	Y+1, r24	; 0x01
	uint8 count=0;
	LCD_clearScreen();
	LCD_displayString("Please Enter");
	LCD_goToRowColumn(1,0);
	LCD_displayString("Password:");
	for(count=0;count<5;count++){
    224e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2250:	8f 5f       	subi	r24, 0xFF	; 255
    2252:	8f 87       	std	Y+15, r24	; 0x0f
    2254:	8f 85       	ldd	r24, Y+15	; 0x0f
    2256:	85 30       	cpi	r24, 0x05	; 5
    2258:	08 f4       	brcc	.+2      	; 0x225c <Take_Password+0x14e>
    225a:	78 cf       	rjmp	.-272    	; 0x214c <Take_Password+0x3e>
		key[count]=KeyPad_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}
	key[5]='#';
    225c:	88 89       	ldd	r24, Y+16	; 0x10
    225e:	99 89       	ldd	r25, Y+17	; 0x11
    2260:	fc 01       	movw	r30, r24
    2262:	35 96       	adiw	r30, 0x05	; 5
    2264:	83 e2       	ldi	r24, 0x23	; 35
    2266:	80 83       	st	Z, r24
	key[6]='\0';
    2268:	88 89       	ldd	r24, Y+16	; 0x10
    226a:	99 89       	ldd	r25, Y+17	; 0x11
    226c:	fc 01       	movw	r30, r24
    226e:	36 96       	adiw	r30, 0x06	; 6
    2270:	10 82       	st	Z, r1
	UART_sendString(key);
    2272:	88 89       	ldd	r24, Y+16	; 0x10
    2274:	99 89       	ldd	r25, Y+17	; 0x11
    2276:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <UART_sendString>
}
    227a:	61 96       	adiw	r28, 0x11	; 17
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	08 95       	ret

00002290 <Take_Old_Password>:

void Take_Old_Password(uint8 *key){
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	6f 97       	sbiw	r28, 0x1f	; 31
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	9f 8f       	std	Y+31, r25	; 0x1f
    22aa:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 count=0;
    22ac:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_clearScreen();
    22ae:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_clearScreen>
	LCD_displayString("Please Enter Old ");
    22b2:	81 ea       	ldi	r24, 0xA1	; 161
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LCD_goToRowColumn>
	LCD_displayString("Password :");
    22c2:	83 eb       	ldi	r24, 0xB3	; 179
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	aa ef       	ldi	r26, 0xFA	; 250
    22d0:	b3 e4       	ldi	r27, 0x43	; 67
    22d2:	89 8f       	std	Y+25, r24	; 0x19
    22d4:	9a 8f       	std	Y+26, r25	; 0x1a
    22d6:	ab 8f       	std	Y+27, r26	; 0x1b
    22d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22da:	69 8d       	ldd	r22, Y+25	; 0x19
    22dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	4a ef       	ldi	r20, 0xFA	; 250
    22e8:	54 e4       	ldi	r21, 0x44	; 68
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	8d 8b       	std	Y+21, r24	; 0x15
    22f4:	9e 8b       	std	Y+22, r25	; 0x16
    22f6:	af 8b       	std	Y+23, r26	; 0x17
    22f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22fa:	6d 89       	ldd	r22, Y+21	; 0x15
    22fc:	7e 89       	ldd	r23, Y+22	; 0x16
    22fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2300:	98 8d       	ldd	r25, Y+24	; 0x18
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e8       	ldi	r20, 0x80	; 128
    2308:	5f e3       	ldi	r21, 0x3F	; 63
    230a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230e:	88 23       	and	r24, r24
    2310:	2c f4       	brge	.+10     	; 0x231c <Take_Old_Password+0x8c>
		__ticks = 1;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	9c 8b       	std	Y+20, r25	; 0x14
    2318:	8b 8b       	std	Y+19, r24	; 0x13
    231a:	3f c0       	rjmp	.+126    	; 0x239a <Take_Old_Password+0x10a>
	else if (__tmp > 65535)
    231c:	6d 89       	ldd	r22, Y+21	; 0x15
    231e:	7e 89       	ldd	r23, Y+22	; 0x16
    2320:	8f 89       	ldd	r24, Y+23	; 0x17
    2322:	98 8d       	ldd	r25, Y+24	; 0x18
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	3f ef       	ldi	r19, 0xFF	; 255
    2328:	4f e7       	ldi	r20, 0x7F	; 127
    232a:	57 e4       	ldi	r21, 0x47	; 71
    232c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2330:	18 16       	cp	r1, r24
    2332:	4c f5       	brge	.+82     	; 0x2386 <Take_Old_Password+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2334:	69 8d       	ldd	r22, Y+25	; 0x19
    2336:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2338:	8b 8d       	ldd	r24, Y+27	; 0x1b
    233a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e2       	ldi	r20, 0x20	; 32
    2342:	51 e4       	ldi	r21, 0x41	; 65
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	bc 01       	movw	r22, r24
    234e:	cd 01       	movw	r24, r26
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9c 8b       	std	Y+20, r25	; 0x14
    235a:	8b 8b       	std	Y+19, r24	; 0x13
    235c:	0f c0       	rjmp	.+30     	; 0x237c <Take_Old_Password+0xec>
    235e:	88 ec       	ldi	r24, 0xC8	; 200
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9a 8b       	std	Y+18, r25	; 0x12
    2364:	89 8b       	std	Y+17, r24	; 0x11
    2366:	89 89       	ldd	r24, Y+17	; 0x11
    2368:	9a 89       	ldd	r25, Y+18	; 0x12
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <Take_Old_Password+0xda>
    236e:	9a 8b       	std	Y+18, r25	; 0x12
    2370:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2372:	8b 89       	ldd	r24, Y+19	; 0x13
    2374:	9c 89       	ldd	r25, Y+20	; 0x14
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	9c 8b       	std	Y+20, r25	; 0x14
    237a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237c:	8b 89       	ldd	r24, Y+19	; 0x13
    237e:	9c 89       	ldd	r25, Y+20	; 0x14
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	69 f7       	brne	.-38     	; 0x235e <Take_Old_Password+0xce>
    2384:	14 c0       	rjmp	.+40     	; 0x23ae <Take_Old_Password+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2386:	6d 89       	ldd	r22, Y+21	; 0x15
    2388:	7e 89       	ldd	r23, Y+22	; 0x16
    238a:	8f 89       	ldd	r24, Y+23	; 0x17
    238c:	98 8d       	ldd	r25, Y+24	; 0x18
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	9c 8b       	std	Y+20, r25	; 0x14
    2398:	8b 8b       	std	Y+19, r24	; 0x13
    239a:	8b 89       	ldd	r24, Y+19	; 0x13
    239c:	9c 89       	ldd	r25, Y+20	; 0x14
    239e:	98 8b       	std	Y+16, r25	; 0x10
    23a0:	8f 87       	std	Y+15, r24	; 0x0f
    23a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a4:	98 89       	ldd	r25, Y+16	; 0x10
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <Take_Old_Password+0x116>
    23aa:	98 8b       	std	Y+16, r25	; 0x10
    23ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	for(count=0;count<5;count++){
    23ae:	1d 8e       	std	Y+29, r1	; 0x1d
    23b0:	84 c0       	rjmp	.+264    	; 0x24ba <Take_Old_Password+0x22a>
		key[count]=KeyPad_getPressedKey();
    23b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23b4:	28 2f       	mov	r18, r24
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23bc:	8c 01       	movw	r16, r24
    23be:	02 0f       	add	r16, r18
    23c0:	13 1f       	adc	r17, r19
    23c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    23c6:	f8 01       	movw	r30, r16
    23c8:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    23ca:	8a e2       	ldi	r24, 0x2A	; 42
    23cc:	0e 94 6d 0a 	call	0x14da	; 0x14da <LCD_displayCharacter>
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	a6 e9       	ldi	r26, 0x96	; 150
    23d6:	b3 e4       	ldi	r27, 0x43	; 67
    23d8:	8b 87       	std	Y+11, r24	; 0x0b
    23da:	9c 87       	std	Y+12, r25	; 0x0c
    23dc:	ad 87       	std	Y+13, r26	; 0x0d
    23de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	4a ef       	ldi	r20, 0xFA	; 250
    23ee:	54 e4       	ldi	r21, 0x44	; 68
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	8f 83       	std	Y+7, r24	; 0x07
    23fa:	98 87       	std	Y+8, r25	; 0x08
    23fc:	a9 87       	std	Y+9, r26	; 0x09
    23fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2400:	6f 81       	ldd	r22, Y+7	; 0x07
    2402:	78 85       	ldd	r23, Y+8	; 0x08
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	9a 85       	ldd	r25, Y+10	; 0x0a
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e8       	ldi	r20, 0x80	; 128
    240e:	5f e3       	ldi	r21, 0x3F	; 63
    2410:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2414:	88 23       	and	r24, r24
    2416:	2c f4       	brge	.+10     	; 0x2422 <Take_Old_Password+0x192>
		__ticks = 1;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	8d 83       	std	Y+5, r24	; 0x05
    2420:	3f c0       	rjmp	.+126    	; 0x24a0 <Take_Old_Password+0x210>
	else if (__tmp > 65535)
    2422:	6f 81       	ldd	r22, Y+7	; 0x07
    2424:	78 85       	ldd	r23, Y+8	; 0x08
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	3f ef       	ldi	r19, 0xFF	; 255
    242e:	4f e7       	ldi	r20, 0x7F	; 127
    2430:	57 e4       	ldi	r21, 0x47	; 71
    2432:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2436:	18 16       	cp	r1, r24
    2438:	4c f5       	brge	.+82     	; 0x248c <Take_Old_Password+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243a:	6b 85       	ldd	r22, Y+11	; 0x0b
    243c:	7c 85       	ldd	r23, Y+12	; 0x0c
    243e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2440:	9e 85       	ldd	r25, Y+14	; 0x0e
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e2       	ldi	r20, 0x20	; 32
    2448:	51 e4       	ldi	r21, 0x41	; 65
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <Take_Old_Password+0x1f2>
    2464:	88 ec       	ldi	r24, 0xC8	; 200
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9c 83       	std	Y+4, r25	; 0x04
    246a:	8b 83       	std	Y+3, r24	; 0x03
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	9c 81       	ldd	r25, Y+4	; 0x04
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <Take_Old_Password+0x1e0>
    2474:	9c 83       	std	Y+4, r25	; 0x04
    2476:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	9e 81       	ldd	r25, Y+6	; 0x06
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	9e 83       	std	Y+6, r25	; 0x06
    2480:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2482:	8d 81       	ldd	r24, Y+5	; 0x05
    2484:	9e 81       	ldd	r25, Y+6	; 0x06
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	69 f7       	brne	.-38     	; 0x2464 <Take_Old_Password+0x1d4>
    248a:	14 c0       	rjmp	.+40     	; 0x24b4 <Take_Old_Password+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248c:	6f 81       	ldd	r22, Y+7	; 0x07
    248e:	78 85       	ldd	r23, Y+8	; 0x08
    2490:	89 85       	ldd	r24, Y+9	; 0x09
    2492:	9a 85       	ldd	r25, Y+10	; 0x0a
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9e 83       	std	Y+6, r25	; 0x06
    249e:	8d 83       	std	Y+5, r24	; 0x05
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
    24a2:	9e 81       	ldd	r25, Y+6	; 0x06
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	9a 81       	ldd	r25, Y+2	; 0x02
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <Take_Old_Password+0x21c>
    24b0:	9a 83       	std	Y+2, r25	; 0x02
    24b2:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayString("Please Enter Old ");
	LCD_goToRowColumn(1,0);
	LCD_displayString("Password :");
	_delay_ms(500);
	for(count=0;count<5;count++){
    24b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b6:	8f 5f       	subi	r24, 0xFF	; 255
    24b8:	8d 8f       	std	Y+29, r24	; 0x1d
    24ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24bc:	85 30       	cpi	r24, 0x05	; 5
    24be:	08 f4       	brcc	.+2      	; 0x24c2 <Take_Old_Password+0x232>
    24c0:	78 cf       	rjmp	.-272    	; 0x23b2 <Take_Old_Password+0x122>
		key[count]=KeyPad_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(300);
	}
	key[5]='#';
    24c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24c6:	fc 01       	movw	r30, r24
    24c8:	35 96       	adiw	r30, 0x05	; 5
    24ca:	83 e2       	ldi	r24, 0x23	; 35
    24cc:	80 83       	st	Z, r24
	key[6]='\0';
    24ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24d2:	fc 01       	movw	r30, r24
    24d4:	36 96       	adiw	r30, 0x06	; 6
    24d6:	10 82       	st	Z, r1
	UART_sendString(key);
    24d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24dc:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <UART_sendString>
}
    24e0:	6f 96       	adiw	r28, 0x1f	; 31
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	1f 91       	pop	r17
    24f2:	0f 91       	pop	r16
    24f4:	08 95       	ret

000024f6 <main>:

int main()
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	eb 97       	sbiw	r28, 0x3b	; 59
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
	uint8 check[6],key[7],i=0,Door_key=0,wrong=0;;
    250a:	1d a6       	std	Y+45, r1	; 0x2d
    250c:	1c a6       	std	Y+44, r1	; 0x2c
    250e:	1b a6       	std	Y+43, r1	; 0x2b
	SREG|=(1<<7);
    2510:	af e5       	ldi	r26, 0x5F	; 95
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	ef e5       	ldi	r30, 0x5F	; 95
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	80 68       	ori	r24, 0x80	; 128
    251c:	8c 93       	st	X, r24
	Timer0_ConfigType T0_Config={clk_1024};   /*Set configuration for Timer0*/
    251e:	85 e0       	ldi	r24, 0x05	; 5
    2520:	8b af       	std	Y+59, r24	; 0x3b
	UART_init();  /*Initialize uart */
    2522:	0e 94 d5 15 	call	0x2baa	; 0x2baa <UART_init>
	LCD_init();  /* Initialize LCD */
    2526:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LCD_init>
	Set_Callback(Timer0_Tick);  /*Set Timer0 Call back function */
    252a:	8b e3       	ldi	r24, 0x3B	; 59
    252c:	9f e0       	ldi	r25, 0x0F	; 15
    252e:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <Set_Callback>
	 * This Loop to Take the password from the user in first time             *
	 * and check if enter the password right twice send it to C_ECU to save it*
	 **************************************************************************/

	while(1){
		Password_init(key);
    2532:	ce 01       	movw	r24, r28
    2534:	c4 96       	adiw	r24, 0x34	; 52
    2536:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <Password_init>
		Password_init(check);
    253a:	ce 01       	movw	r24, r28
    253c:	8e 96       	adiw	r24, 0x2e	; 46
    253e:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <Password_init>
		for(i=0;i<5;i++){
    2542:	1d a6       	std	Y+45, r1	; 0x2d
    2544:	17 c0       	rjmp	.+46     	; 0x2574 <main+0x7e>
			if(key[i]==check[i]){
    2546:	8d a5       	ldd	r24, Y+45	; 0x2d
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	ce 01       	movw	r24, r28
    254e:	c4 96       	adiw	r24, 0x34	; 52
    2550:	fc 01       	movw	r30, r24
    2552:	e2 0f       	add	r30, r18
    2554:	f3 1f       	adc	r31, r19
    2556:	40 81       	ld	r20, Z
    2558:	8d a5       	ldd	r24, Y+45	; 0x2d
    255a:	28 2f       	mov	r18, r24
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	ce 01       	movw	r24, r28
    2560:	8e 96       	adiw	r24, 0x2e	; 46
    2562:	fc 01       	movw	r30, r24
    2564:	e2 0f       	add	r30, r18
    2566:	f3 1f       	adc	r31, r19
    2568:	80 81       	ld	r24, Z
    256a:	48 17       	cp	r20, r24
    256c:	31 f4       	brne	.+12     	; 0x257a <main+0x84>
	 **************************************************************************/

	while(1){
		Password_init(key);
		Password_init(check);
		for(i=0;i<5;i++){
    256e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2570:	8f 5f       	subi	r24, 0xFF	; 255
    2572:	8d a7       	std	Y+45, r24	; 0x2d
    2574:	8d a5       	ldd	r24, Y+45	; 0x2d
    2576:	85 30       	cpi	r24, 0x05	; 5
    2578:	30 f3       	brcs	.-52     	; 0x2546 <main+0x50>

			}else{
				break;
			}
		}
		if(i==5){
    257a:	8d a5       	ldd	r24, Y+45	; 0x2d
    257c:	85 30       	cpi	r24, 0x05	; 5
    257e:	11 f0       	breq	.+4      	; 0x2584 <main+0x8e>
			break;
		}else{
			i=0;
    2580:	1d a6       	std	Y+45, r1	; 0x2d
    2582:	d7 cf       	rjmp	.-82     	; 0x2532 <main+0x3c>
		}
	}
	key[5]='#';
    2584:	83 e2       	ldi	r24, 0x23	; 35
    2586:	89 af       	std	Y+57, r24	; 0x39
	key[6]='\0';
    2588:	1a ae       	std	Y+58, r1	; 0x3a
	UART_sendString(key); /* Send the password to Control ECU to Save it in EEPROM */
    258a:	ce 01       	movw	r24, r28
    258c:	c4 96       	adiw	r24, 0x34	; 52
    258e:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <UART_sendString>
	while(1){
		LCD_clearScreen();
    2592:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_clearScreen>
		LCD_displayString("* :Open Door");
    2596:	8e eb       	ldi	r24, 0xBE	; 190
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	60 e0       	ldi	r22, 0x00	; 0
    25a2:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LCD_goToRowColumn>
		LCD_displayString("# :Change Pass");
    25a6:	8b ec       	ldi	r24, 0xCB	; 203
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
		Door_key=KeyPad_getPressedKey();
    25ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    25b2:	8c a7       	std	Y+44, r24	; 0x2c
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a6 e9       	ldi	r26, 0x96	; 150
    25ba:	b3 e4       	ldi	r27, 0x43	; 67
    25bc:	8f a3       	std	Y+39, r24	; 0x27
    25be:	98 a7       	std	Y+40, r25	; 0x28
    25c0:	a9 a7       	std	Y+41, r26	; 0x29
    25c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c4:	6f a1       	ldd	r22, Y+39	; 0x27
    25c6:	78 a5       	ldd	r23, Y+40	; 0x28
    25c8:	89 a5       	ldd	r24, Y+41	; 0x29
    25ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4a ef       	ldi	r20, 0xFA	; 250
    25d2:	54 e4       	ldi	r21, 0x44	; 68
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	8b a3       	std	Y+35, r24	; 0x23
    25de:	9c a3       	std	Y+36, r25	; 0x24
    25e0:	ad a3       	std	Y+37, r26	; 0x25
    25e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25e4:	6b a1       	ldd	r22, Y+35	; 0x23
    25e6:	7c a1       	ldd	r23, Y+36	; 0x24
    25e8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ea:	9e a1       	ldd	r25, Y+38	; 0x26
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e8       	ldi	r20, 0x80	; 128
    25f2:	5f e3       	ldi	r21, 0x3F	; 63
    25f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f8:	88 23       	and	r24, r24
    25fa:	2c f4       	brge	.+10     	; 0x2606 <main+0x110>
		__ticks = 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9a a3       	std	Y+34, r25	; 0x22
    2602:	89 a3       	std	Y+33, r24	; 0x21
    2604:	3f c0       	rjmp	.+126    	; 0x2684 <main+0x18e>
	else if (__tmp > 65535)
    2606:	6b a1       	ldd	r22, Y+35	; 0x23
    2608:	7c a1       	ldd	r23, Y+36	; 0x24
    260a:	8d a1       	ldd	r24, Y+37	; 0x25
    260c:	9e a1       	ldd	r25, Y+38	; 0x26
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	3f ef       	ldi	r19, 0xFF	; 255
    2612:	4f e7       	ldi	r20, 0x7F	; 127
    2614:	57 e4       	ldi	r21, 0x47	; 71
    2616:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    261a:	18 16       	cp	r1, r24
    261c:	4c f5       	brge	.+82     	; 0x2670 <main+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261e:	6f a1       	ldd	r22, Y+39	; 0x27
    2620:	78 a5       	ldd	r23, Y+40	; 0x28
    2622:	89 a5       	ldd	r24, Y+41	; 0x29
    2624:	9a a5       	ldd	r25, Y+42	; 0x2a
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e2       	ldi	r20, 0x20	; 32
    262c:	51 e4       	ldi	r21, 0x41	; 65
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9a a3       	std	Y+34, r25	; 0x22
    2644:	89 a3       	std	Y+33, r24	; 0x21
    2646:	0f c0       	rjmp	.+30     	; 0x2666 <main+0x170>
    2648:	88 ec       	ldi	r24, 0xC8	; 200
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	98 a3       	std	Y+32, r25	; 0x20
    264e:	8f 8f       	std	Y+31, r24	; 0x1f
    2650:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2652:	98 a1       	ldd	r25, Y+32	; 0x20
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <main+0x15e>
    2658:	98 a3       	std	Y+32, r25	; 0x20
    265a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265c:	89 a1       	ldd	r24, Y+33	; 0x21
    265e:	9a a1       	ldd	r25, Y+34	; 0x22
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	9a a3       	std	Y+34, r25	; 0x22
    2664:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2666:	89 a1       	ldd	r24, Y+33	; 0x21
    2668:	9a a1       	ldd	r25, Y+34	; 0x22
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	69 f7       	brne	.-38     	; 0x2648 <main+0x152>
    266e:	14 c0       	rjmp	.+40     	; 0x2698 <main+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2670:	6b a1       	ldd	r22, Y+35	; 0x23
    2672:	7c a1       	ldd	r23, Y+36	; 0x24
    2674:	8d a1       	ldd	r24, Y+37	; 0x25
    2676:	9e a1       	ldd	r25, Y+38	; 0x26
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9a a3       	std	Y+34, r25	; 0x22
    2682:	89 a3       	std	Y+33, r24	; 0x21
    2684:	89 a1       	ldd	r24, Y+33	; 0x21
    2686:	9a a1       	ldd	r25, Y+34	; 0x22
    2688:	9e 8f       	std	Y+30, r25	; 0x1e
    268a:	8d 8f       	std	Y+29, r24	; 0x1d
    268c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    268e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <main+0x19a>
    2694:	9e 8f       	std	Y+30, r25	; 0x1e
    2696:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(300);
		/* if user want to open the door*/
		if(Door_key=='*'){
    2698:	8c a5       	ldd	r24, Y+44	; 0x2c
    269a:	8a 32       	cpi	r24, 0x2A	; 42
    269c:	09 f0       	breq	.+2      	; 0x26a0 <main+0x1aa>
    269e:	e5 c0       	rjmp	.+458    	; 0x286a <main+0x374>
			/* take password from the user and store it in array and send array to C_ECU*/
			Take_Password(key);
    26a0:	ce 01       	movw	r24, r28
    26a2:	c4 96       	adiw	r24, 0x34	; 52
    26a4:	0e 94 87 10 	call	0x210e	; 0x210e <Take_Password>
			/* Send to C_ECU that the user want to open the door*/
			UART_sendByte(Door_key);
    26a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    26aa:	0e 94 ef 15 	call	0x2bde	; 0x2bde <UART_sendByte>
			/* if the Password is the same as in EEPROM Open the door*/
			Door_key=UART_recieveByte();
    26ae:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <UART_recieveByte>
    26b2:	8c a7       	std	Y+44, r24	; 0x2c
			if(Door_key==READY){
    26b4:	8c a5       	ldd	r24, Y+44	; 0x2c
    26b6:	81 30       	cpi	r24, 0x01	; 1
    26b8:	c9 f5       	brne	.+114    	; 0x272c <main+0x236>
				LCD_clearScreen();
    26ba:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_clearScreen>
				LCD_displayString("Door is ");
    26be:	8a ed       	ldi	r24, 0xDA	; 218
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
				LCD_goToRowColumn(1,0);
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <LCD_goToRowColumn>
				LCD_displayString("unlocking");
    26ce:	83 ee       	ldi	r24, 0xE3	; 227
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
				Timer0_init_Normal_Mode(&T0_Config);
    26d6:	ce 01       	movw	r24, r28
    26d8:	cb 96       	adiw	r24, 0x3b	; 59
    26da:	0e 94 76 15 	call	0x2aec	; 0x2aec <Timer0_init_Normal_Mode>
				while(Tick<457);
    26de:	80 91 28 01 	lds	r24, 0x0128
    26e2:	90 91 29 01 	lds	r25, 0x0129
    26e6:	21 e0       	ldi	r18, 0x01	; 1
    26e8:	89 3c       	cpi	r24, 0xC9	; 201
    26ea:	92 07       	cpc	r25, r18
    26ec:	c0 f3       	brcs	.-16     	; 0x26de <main+0x1e8>
				Timer0_Deinit();
    26ee:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <Timer0_Deinit>
				LCD_clearScreen();
    26f2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_clearScreen>
				Tick=0;
    26f6:	10 92 29 01 	sts	0x0129, r1
    26fa:	10 92 28 01 	sts	0x0128, r1
				LCD_displayString("Door is Locking");
    26fe:	8d ee       	ldi	r24, 0xED	; 237
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
				Timer0_init_Normal_Mode(&T0_Config);
    2706:	ce 01       	movw	r24, r28
    2708:	cb 96       	adiw	r24, 0x3b	; 59
    270a:	0e 94 76 15 	call	0x2aec	; 0x2aec <Timer0_init_Normal_Mode>
				while(Tick<457);
    270e:	80 91 28 01 	lds	r24, 0x0128
    2712:	90 91 29 01 	lds	r25, 0x0129
    2716:	21 e0       	ldi	r18, 0x01	; 1
    2718:	89 3c       	cpi	r24, 0xC9	; 201
    271a:	92 07       	cpc	r25, r18
    271c:	c0 f3       	brcs	.-16     	; 0x270e <main+0x218>
				Timer0_Deinit();
    271e:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <Timer0_Deinit>
				Tick=0;
    2722:	10 92 29 01 	sts	0x0129, r1
    2726:	10 92 28 01 	sts	0x0128, r1
    272a:	33 cf       	rjmp	.-410    	; 0x2592 <main+0x9c>
			}
			/*if the Password is not right Print in LCD Wrong*/
			else{
				LCD_clearScreen();
    272c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_clearScreen>
				LCD_displayString("Wrong");
    2730:	8d ef       	ldi	r24, 0xFD	; 253
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
				wrong++;
    2738:	8b a5       	ldd	r24, Y+43	; 0x2b
    273a:	8f 5f       	subi	r24, 0xFF	; 255
    273c:	8b a7       	std	Y+43, r24	; 0x2b
				/* if the user enter the password wrong three times Stop the System for one minute*/
				if(wrong==3){
    273e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2740:	83 30       	cpi	r24, 0x03	; 3
    2742:	d1 f4       	brne	.+52     	; 0x2778 <main+0x282>
					Timer0_init_Normal_Mode(&T0_Config);
    2744:	ce 01       	movw	r24, r28
    2746:	cb 96       	adiw	r24, 0x3b	; 59
    2748:	0e 94 76 15 	call	0x2aec	; 0x2aec <Timer0_init_Normal_Mode>
					LCD_clearScreen();
    274c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_clearScreen>
					LCD_displayString("Wrong..Wrong");
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	91 e0       	ldi	r25, 0x01	; 1
    2754:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
					while(Tick<1828);
    2758:	80 91 28 01 	lds	r24, 0x0128
    275c:	90 91 29 01 	lds	r25, 0x0129
    2760:	27 e0       	ldi	r18, 0x07	; 7
    2762:	84 32       	cpi	r24, 0x24	; 36
    2764:	92 07       	cpc	r25, r18
    2766:	c0 f3       	brcs	.-16     	; 0x2758 <main+0x262>
					Timer0_Deinit();
    2768:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <Timer0_Deinit>
					Tick=0;
    276c:	10 92 29 01 	sts	0x0129, r1
    2770:	10 92 28 01 	sts	0x0128, r1
					wrong=0;
    2774:	1b a6       	std	Y+43, r1	; 0x2b
    2776:	72 c0       	rjmp	.+228    	; 0x285c <main+0x366>
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	aa ef       	ldi	r26, 0xFA	; 250
    277e:	b3 e4       	ldi	r27, 0x43	; 67
    2780:	89 8f       	std	Y+25, r24	; 0x19
    2782:	9a 8f       	std	Y+26, r25	; 0x1a
    2784:	ab 8f       	std	Y+27, r26	; 0x1b
    2786:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2788:	69 8d       	ldd	r22, Y+25	; 0x19
    278a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    278c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    278e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	4a ef       	ldi	r20, 0xFA	; 250
    2796:	54 e4       	ldi	r21, 0x44	; 68
    2798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	8d 8b       	std	Y+21, r24	; 0x15
    27a2:	9e 8b       	std	Y+22, r25	; 0x16
    27a4:	af 8b       	std	Y+23, r26	; 0x17
    27a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27a8:	6d 89       	ldd	r22, Y+21	; 0x15
    27aa:	7e 89       	ldd	r23, Y+22	; 0x16
    27ac:	8f 89       	ldd	r24, Y+23	; 0x17
    27ae:	98 8d       	ldd	r25, Y+24	; 0x18
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e8       	ldi	r20, 0x80	; 128
    27b6:	5f e3       	ldi	r21, 0x3F	; 63
    27b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27bc:	88 23       	and	r24, r24
    27be:	2c f4       	brge	.+10     	; 0x27ca <main+0x2d4>
		__ticks = 1;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	9c 8b       	std	Y+20, r25	; 0x14
    27c6:	8b 8b       	std	Y+19, r24	; 0x13
    27c8:	3f c0       	rjmp	.+126    	; 0x2848 <main+0x352>
	else if (__tmp > 65535)
    27ca:	6d 89       	ldd	r22, Y+21	; 0x15
    27cc:	7e 89       	ldd	r23, Y+22	; 0x16
    27ce:	8f 89       	ldd	r24, Y+23	; 0x17
    27d0:	98 8d       	ldd	r25, Y+24	; 0x18
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	3f ef       	ldi	r19, 0xFF	; 255
    27d6:	4f e7       	ldi	r20, 0x7F	; 127
    27d8:	57 e4       	ldi	r21, 0x47	; 71
    27da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27de:	18 16       	cp	r1, r24
    27e0:	4c f5       	brge	.+82     	; 0x2834 <main+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e2:	69 8d       	ldd	r22, Y+25	; 0x19
    27e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e2       	ldi	r20, 0x20	; 32
    27f0:	51 e4       	ldi	r21, 0x41	; 65
    27f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9c 8b       	std	Y+20, r25	; 0x14
    2808:	8b 8b       	std	Y+19, r24	; 0x13
    280a:	0f c0       	rjmp	.+30     	; 0x282a <main+0x334>
    280c:	88 ec       	ldi	r24, 0xC8	; 200
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	9a 8b       	std	Y+18, r25	; 0x12
    2812:	89 8b       	std	Y+17, r24	; 0x11
    2814:	89 89       	ldd	r24, Y+17	; 0x11
    2816:	9a 89       	ldd	r25, Y+18	; 0x12
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <main+0x322>
    281c:	9a 8b       	std	Y+18, r25	; 0x12
    281e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2820:	8b 89       	ldd	r24, Y+19	; 0x13
    2822:	9c 89       	ldd	r25, Y+20	; 0x14
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	9c 8b       	std	Y+20, r25	; 0x14
    2828:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282a:	8b 89       	ldd	r24, Y+19	; 0x13
    282c:	9c 89       	ldd	r25, Y+20	; 0x14
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	69 f7       	brne	.-38     	; 0x280c <main+0x316>
    2832:	14 c0       	rjmp	.+40     	; 0x285c <main+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2834:	6d 89       	ldd	r22, Y+21	; 0x15
    2836:	7e 89       	ldd	r23, Y+22	; 0x16
    2838:	8f 89       	ldd	r24, Y+23	; 0x17
    283a:	98 8d       	ldd	r25, Y+24	; 0x18
    283c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9c 8b       	std	Y+20, r25	; 0x14
    2846:	8b 8b       	std	Y+19, r24	; 0x13
    2848:	8b 89       	ldd	r24, Y+19	; 0x13
    284a:	9c 89       	ldd	r25, Y+20	; 0x14
    284c:	98 8b       	std	Y+16, r25	; 0x10
    284e:	8f 87       	std	Y+15, r24	; 0x0f
    2850:	8f 85       	ldd	r24, Y+15	; 0x0f
    2852:	98 89       	ldd	r25, Y+16	; 0x10
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <main+0x35e>
    2858:	98 8b       	std	Y+16, r25	; 0x10
    285a:	8f 87       	std	Y+15, r24	; 0x0f
				}else{
					_delay_ms(500);
				}
				LCD_clearScreen();
    285c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_clearScreen>
				LCD_displayString("Door is closed");
    2860:	80 e1       	ldi	r24, 0x10	; 16
    2862:	91 e0       	ldi	r25, 0x01	; 1
    2864:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
    2868:	94 ce       	rjmp	.-728    	; 0x2592 <main+0x9c>
			}
		}
		/* if the user want to change password*/
		else if(Door_key=='#'){
    286a:	8c a5       	ldd	r24, Y+44	; 0x2c
    286c:	83 32       	cpi	r24, 0x23	; 35
    286e:	09 f0       	breq	.+2      	; 0x2872 <main+0x37c>
    2870:	90 ce       	rjmp	.-736    	; 0x2592 <main+0x9c>
			Take_Old_Password(key); /* take old password and send it to C_ECU*/
    2872:	ce 01       	movw	r24, r28
    2874:	c4 96       	adiw	r24, 0x34	; 52
    2876:	0e 94 48 11 	call	0x2290	; 0x2290 <Take_Old_Password>
			UART_sendByte(Door_key); /* Send to C_ECU that the user want to change password*/
    287a:	8c a5       	ldd	r24, Y+44	; 0x2c
    287c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <UART_sendByte>
			Door_key=UART_recieveByte();
    2880:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <UART_recieveByte>
    2884:	8c a7       	std	Y+44, r24	; 0x2c
			/* if the password is Right Take new password from user*/
			if(Door_key==READY){
    2886:	8c a5       	ldd	r24, Y+44	; 0x2c
    2888:	81 30       	cpi	r24, 0x01	; 1
    288a:	89 f5       	brne	.+98     	; 0x28ee <main+0x3f8>
				/**************************************************************************
				 * This Loop to Take the password from the user in first time             *
				 * and check if enter the password right twice send it to C_ECU to save it*
				 **************************************************************************/
				while(1){
					Password_init(key);
    288c:	ce 01       	movw	r24, r28
    288e:	c4 96       	adiw	r24, 0x34	; 52
    2890:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <Password_init>
					Password_init(check);
    2894:	ce 01       	movw	r24, r28
    2896:	8e 96       	adiw	r24, 0x2e	; 46
    2898:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <Password_init>
					for(i=0;i<5;i++){
    289c:	1d a6       	std	Y+45, r1	; 0x2d
    289e:	17 c0       	rjmp	.+46     	; 0x28ce <main+0x3d8>
						if(key[i]==check[i]){
    28a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    28a2:	28 2f       	mov	r18, r24
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	ce 01       	movw	r24, r28
    28a8:	c4 96       	adiw	r24, 0x34	; 52
    28aa:	fc 01       	movw	r30, r24
    28ac:	e2 0f       	add	r30, r18
    28ae:	f3 1f       	adc	r31, r19
    28b0:	40 81       	ld	r20, Z
    28b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	ce 01       	movw	r24, r28
    28ba:	8e 96       	adiw	r24, 0x2e	; 46
    28bc:	fc 01       	movw	r30, r24
    28be:	e2 0f       	add	r30, r18
    28c0:	f3 1f       	adc	r31, r19
    28c2:	80 81       	ld	r24, Z
    28c4:	48 17       	cp	r20, r24
    28c6:	31 f4       	brne	.+12     	; 0x28d4 <main+0x3de>
				 * and check if enter the password right twice send it to C_ECU to save it*
				 **************************************************************************/
				while(1){
					Password_init(key);
					Password_init(check);
					for(i=0;i<5;i++){
    28c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    28ca:	8f 5f       	subi	r24, 0xFF	; 255
    28cc:	8d a7       	std	Y+45, r24	; 0x2d
    28ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    28d0:	85 30       	cpi	r24, 0x05	; 5
    28d2:	30 f3       	brcs	.-52     	; 0x28a0 <main+0x3aa>

						}else{
							break;
						}
					}
					if(i==5){
    28d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    28d6:	85 30       	cpi	r24, 0x05	; 5
    28d8:	41 f4       	brne	.+16     	; 0x28ea <main+0x3f4>
						key[5]='#';
    28da:	83 e2       	ldi	r24, 0x23	; 35
    28dc:	89 af       	std	Y+57, r24	; 0x39
						key[6]='\0';
    28de:	1a ae       	std	Y+58, r1	; 0x3a
						UART_sendString(key);
    28e0:	ce 01       	movw	r24, r28
    28e2:	c4 96       	adiw	r24, 0x34	; 52
    28e4:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <UART_sendString>
    28e8:	54 ce       	rjmp	.-856    	; 0x2592 <main+0x9c>
						break;
					}else{
						i=0;
    28ea:	1d a6       	std	Y+45, r1	; 0x2d
    28ec:	cf cf       	rjmp	.-98     	; 0x288c <main+0x396>
					}
				}
			}
			/*if the Password is not right Print in LCD Wrong*/
			else{
				LCD_clearScreen();
    28ee:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_clearScreen>
				LCD_displayString("Wrong");
    28f2:	8d ef       	ldi	r24, 0xFD	; 253
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
				wrong++;
    28fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    28fc:	8f 5f       	subi	r24, 0xFF	; 255
    28fe:	8b a7       	std	Y+43, r24	; 0x2b
				/* if the user enter the password wrong three times Stop the System for one minute*/
				if(wrong>=3){
    2900:	8b a5       	ldd	r24, Y+43	; 0x2b
    2902:	83 30       	cpi	r24, 0x03	; 3
    2904:	d0 f0       	brcs	.+52     	; 0x293a <main+0x444>
					Timer0_init_Normal_Mode(&T0_Config);
    2906:	ce 01       	movw	r24, r28
    2908:	cb 96       	adiw	r24, 0x3b	; 59
    290a:	0e 94 76 15 	call	0x2aec	; 0x2aec <Timer0_init_Normal_Mode>
					LCD_clearScreen();
    290e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_clearScreen>
					LCD_displayString("Wrong..Wrong");
    2912:	83 e0       	ldi	r24, 0x03	; 3
    2914:	91 e0       	ldi	r25, 0x01	; 1
    2916:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <LCD_displayString>
					while(Tick<1828);
    291a:	80 91 28 01 	lds	r24, 0x0128
    291e:	90 91 29 01 	lds	r25, 0x0129
    2922:	27 e0       	ldi	r18, 0x07	; 7
    2924:	84 32       	cpi	r24, 0x24	; 36
    2926:	92 07       	cpc	r25, r18
    2928:	c0 f3       	brcs	.-16     	; 0x291a <main+0x424>
					Timer0_Deinit();
    292a:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <Timer0_Deinit>
					Tick=0;
    292e:	10 92 29 01 	sts	0x0129, r1
    2932:	10 92 28 01 	sts	0x0128, r1
					wrong=0;
    2936:	1b a6       	std	Y+43, r1	; 0x2b
    2938:	2c ce       	rjmp	.-936    	; 0x2592 <main+0x9c>
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	aa ef       	ldi	r26, 0xFA	; 250
    2940:	b3 e4       	ldi	r27, 0x43	; 67
    2942:	8b 87       	std	Y+11, r24	; 0x0b
    2944:	9c 87       	std	Y+12, r25	; 0x0c
    2946:	ad 87       	std	Y+13, r26	; 0x0d
    2948:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294a:	6b 85       	ldd	r22, Y+11	; 0x0b
    294c:	7c 85       	ldd	r23, Y+12	; 0x0c
    294e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2950:	9e 85       	ldd	r25, Y+14	; 0x0e
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	4a ef       	ldi	r20, 0xFA	; 250
    2958:	54 e4       	ldi	r21, 0x44	; 68
    295a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	8f 83       	std	Y+7, r24	; 0x07
    2964:	98 87       	std	Y+8, r25	; 0x08
    2966:	a9 87       	std	Y+9, r26	; 0x09
    2968:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    296a:	6f 81       	ldd	r22, Y+7	; 0x07
    296c:	78 85       	ldd	r23, Y+8	; 0x08
    296e:	89 85       	ldd	r24, Y+9	; 0x09
    2970:	9a 85       	ldd	r25, Y+10	; 0x0a
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e8       	ldi	r20, 0x80	; 128
    2978:	5f e3       	ldi	r21, 0x3F	; 63
    297a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    297e:	88 23       	and	r24, r24
    2980:	2c f4       	brge	.+10     	; 0x298c <main+0x496>
		__ticks = 1;
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	9e 83       	std	Y+6, r25	; 0x06
    2988:	8d 83       	std	Y+5, r24	; 0x05
    298a:	3f c0       	rjmp	.+126    	; 0x2a0a <main+0x514>
	else if (__tmp > 65535)
    298c:	6f 81       	ldd	r22, Y+7	; 0x07
    298e:	78 85       	ldd	r23, Y+8	; 0x08
    2990:	89 85       	ldd	r24, Y+9	; 0x09
    2992:	9a 85       	ldd	r25, Y+10	; 0x0a
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	3f ef       	ldi	r19, 0xFF	; 255
    2998:	4f e7       	ldi	r20, 0x7F	; 127
    299a:	57 e4       	ldi	r21, 0x47	; 71
    299c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29a0:	18 16       	cp	r1, r24
    29a2:	4c f5       	brge	.+82     	; 0x29f6 <main+0x500>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e2       	ldi	r20, 0x20	; 32
    29b2:	51 e4       	ldi	r21, 0x41	; 65
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	bc 01       	movw	r22, r24
    29be:	cd 01       	movw	r24, r26
    29c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
    29cc:	0f c0       	rjmp	.+30     	; 0x29ec <main+0x4f6>
    29ce:	88 ec       	ldi	r24, 0xC8	; 200
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	9c 83       	std	Y+4, r25	; 0x04
    29d4:	8b 83       	std	Y+3, r24	; 0x03
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	9c 81       	ldd	r25, Y+4	; 0x04
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <main+0x4e4>
    29de:	9c 83       	std	Y+4, r25	; 0x04
    29e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e2:	8d 81       	ldd	r24, Y+5	; 0x05
    29e4:	9e 81       	ldd	r25, Y+6	; 0x06
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	9e 83       	std	Y+6, r25	; 0x06
    29ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	9e 81       	ldd	r25, Y+6	; 0x06
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	69 f7       	brne	.-38     	; 0x29ce <main+0x4d8>
    29f4:	ce cd       	rjmp	.-1124   	; 0x2592 <main+0x9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f6:	6f 81       	ldd	r22, Y+7	; 0x07
    29f8:	78 85       	ldd	r23, Y+8	; 0x08
    29fa:	89 85       	ldd	r24, Y+9	; 0x09
    29fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0e:	9a 83       	std	Y+2, r25	; 0x02
    2a10:	89 83       	std	Y+1, r24	; 0x01
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	9a 81       	ldd	r25, Y+2	; 0x02
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <main+0x520>
    2a1a:	9a 83       	std	Y+2, r25	; 0x02
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	b9 cd       	rjmp	.-1166   	; 0x2592 <main+0x9c>

00002a20 <__vector_9>:

/*callback function*/
static  void (*g_callBackPtr)(void) = NULL;


ISR(TIMER0_OVF_vect){
    2a20:	1f 92       	push	r1
    2a22:	0f 92       	push	r0
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	0f 92       	push	r0
    2a28:	11 24       	eor	r1, r1
    2a2a:	2f 93       	push	r18
    2a2c:	3f 93       	push	r19
    2a2e:	4f 93       	push	r20
    2a30:	5f 93       	push	r21
    2a32:	6f 93       	push	r22
    2a34:	7f 93       	push	r23
    2a36:	8f 93       	push	r24
    2a38:	9f 93       	push	r25
    2a3a:	af 93       	push	r26
    2a3c:	bf 93       	push	r27
    2a3e:	ef 93       	push	r30
    2a40:	ff 93       	push	r31
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
		if(g_callBackPtr!=NULL){
    2a4a:	80 91 2a 01 	lds	r24, 0x012A
    2a4e:	90 91 2b 01 	lds	r25, 0x012B
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	29 f0       	breq	.+10     	; 0x2a60 <__vector_9+0x40>
			(*g_callBackPtr)();
    2a56:	e0 91 2a 01 	lds	r30, 0x012A
    2a5a:	f0 91 2b 01 	lds	r31, 0x012B
    2a5e:	09 95       	icall
		}
}
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	ff 91       	pop	r31
    2a66:	ef 91       	pop	r30
    2a68:	bf 91       	pop	r27
    2a6a:	af 91       	pop	r26
    2a6c:	9f 91       	pop	r25
    2a6e:	8f 91       	pop	r24
    2a70:	7f 91       	pop	r23
    2a72:	6f 91       	pop	r22
    2a74:	5f 91       	pop	r21
    2a76:	4f 91       	pop	r20
    2a78:	3f 91       	pop	r19
    2a7a:	2f 91       	pop	r18
    2a7c:	0f 90       	pop	r0
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	0f 90       	pop	r0
    2a82:	1f 90       	pop	r1
    2a84:	18 95       	reti

00002a86 <__vector_19>:

ISR(TIMER0_COMP_vect){
    2a86:	1f 92       	push	r1
    2a88:	0f 92       	push	r0
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	0f 92       	push	r0
    2a8e:	11 24       	eor	r1, r1
    2a90:	2f 93       	push	r18
    2a92:	3f 93       	push	r19
    2a94:	4f 93       	push	r20
    2a96:	5f 93       	push	r21
    2a98:	6f 93       	push	r22
    2a9a:	7f 93       	push	r23
    2a9c:	8f 93       	push	r24
    2a9e:	9f 93       	push	r25
    2aa0:	af 93       	push	r26
    2aa2:	bf 93       	push	r27
    2aa4:	ef 93       	push	r30
    2aa6:	ff 93       	push	r31
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
		if(g_callBackPtr!=NULL){
    2ab0:	80 91 2a 01 	lds	r24, 0x012A
    2ab4:	90 91 2b 01 	lds	r25, 0x012B
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	29 f0       	breq	.+10     	; 0x2ac6 <__vector_19+0x40>
			(*g_callBackPtr)();
    2abc:	e0 91 2a 01 	lds	r30, 0x012A
    2ac0:	f0 91 2b 01 	lds	r31, 0x012B
    2ac4:	09 95       	icall
		}
}
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	ff 91       	pop	r31
    2acc:	ef 91       	pop	r30
    2ace:	bf 91       	pop	r27
    2ad0:	af 91       	pop	r26
    2ad2:	9f 91       	pop	r25
    2ad4:	8f 91       	pop	r24
    2ad6:	7f 91       	pop	r23
    2ad8:	6f 91       	pop	r22
    2ada:	5f 91       	pop	r21
    2adc:	4f 91       	pop	r20
    2ade:	3f 91       	pop	r19
    2ae0:	2f 91       	pop	r18
    2ae2:	0f 90       	pop	r0
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	0f 90       	pop	r0
    2ae8:	1f 90       	pop	r1
    2aea:	18 95       	reti

00002aec <Timer0_init_Normal_Mode>:

/*Initialize Timer0 in Normal Mode*/

void Timer0_init_Normal_Mode(Timer0_ConfigType *Timer0_config){
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	00 d0       	rcall	.+0      	; 0x2af2 <Timer0_init_Normal_Mode+0x6>
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	9a 83       	std	Y+2, r25	; 0x02
    2af8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=195;
    2afa:	e2 e5       	ldi	r30, 0x52	; 82
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	83 ec       	ldi	r24, 0xC3	; 195
    2b00:	80 83       	st	Z, r24
	TCCR0 |=(1<<FOC0)|(Timer0_config->clk);
    2b02:	a3 e5       	ldi	r26, 0x53	; 83
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e3 e5       	ldi	r30, 0x53	; 83
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	90 81       	ld	r25, Z
    2b0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b10:	80 81       	ld	r24, Z
    2b12:	89 2b       	or	r24, r25
    2b14:	80 68       	ori	r24, 0x80	; 128
    2b16:	8c 93       	st	X, r24
	TIMSK|=(1<<TOIE0);
    2b18:	a9 e5       	ldi	r26, 0x59	; 89
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e9 e5       	ldi	r30, 0x59	; 89
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	81 60       	ori	r24, 0x01	; 1
    2b24:	8c 93       	st	X, r24
}
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <Timer0_init_Comp_Mode>:

/*Initialize Timer0 in Compare Mode*/

void Timer0_init_Comp_Mode(Timer0_ConfigType *Timer0_config){
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <Timer0_init_Comp_Mode+0x6>
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	9a 83       	std	Y+2, r25	; 0x02
    2b3c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    2b3e:	e2 e5       	ldi	r30, 0x52	; 82
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	10 82       	st	Z, r1
	TCCR0 |=(1<<FOC0)|(Timer0_config->clk)|(1<<COM01);
    2b44:	a3 e5       	ldi	r26, 0x53	; 83
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	e3 e5       	ldi	r30, 0x53	; 83
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	90 81       	ld	r25, Z
    2b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b50:	fa 81       	ldd	r31, Y+2	; 0x02
    2b52:	80 81       	ld	r24, Z
    2b54:	89 2b       	or	r24, r25
    2b56:	80 6a       	ori	r24, 0xA0	; 160
    2b58:	8c 93       	st	X, r24
	TIMSK|=(1<<OCIE0);
    2b5a:	a9 e5       	ldi	r26, 0x59	; 89
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	e9 e5       	ldi	r30, 0x59	; 89
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	82 60       	ori	r24, 0x02	; 2
    2b66:	8c 93       	st	X, r24
}
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <Set_Callback>:

/*Function to Set Callback Function*/

void Set_Callback(void (*T_callBackPtr)(void)){
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <Set_Callback+0x6>
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
    2b7c:	9a 83       	std	Y+2, r25	; 0x02
    2b7e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=T_callBackPtr;
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	90 93 2b 01 	sts	0x012B, r25
    2b88:	80 93 2a 01 	sts	0x012A, r24
}
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <Timer0_Deinit>:

/*Disable Timer0*/

void Timer0_Deinit(void){
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    2b9e:	e3 e5       	ldi	r30, 0x53	; 83
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	10 82       	st	Z, r1
}
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2bb2:	eb e2       	ldi	r30, 0x2B	; 43
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	82 e0       	ldi	r24, 0x02	; 2
    2bb8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2bba:	ea e2       	ldi	r30, 0x2A	; 42
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	88 e1       	ldi	r24, 0x18	; 24
    2bc0:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2bc2:	e0 e4       	ldi	r30, 0x40	; 64
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	86 e8       	ldi	r24, 0x86	; 134
    2bc8:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2bca:	e0 e4       	ldi	r30, 0x40	; 64
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2bd0:	e9 e2       	ldi	r30, 0x29	; 41
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	87 e6       	ldi	r24, 0x67	; 103
    2bd6:	80 83       	st	Z, r24
}
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	08 95       	ret

00002bde <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	0f 92       	push	r0
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2bea:	eb e2       	ldi	r30, 0x2B	; 43
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	88 2f       	mov	r24, r24
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	80 72       	andi	r24, 0x20	; 32
    2bf6:	90 70       	andi	r25, 0x00	; 0
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	b9 f3       	breq	.-18     	; 0x2bea <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2bfc:	ec e2       	ldi	r30, 0x2C	; 44
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2c04:	0f 90       	pop	r0
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c14:	eb e2       	ldi	r30, 0x2B	; 43
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	88 23       	and	r24, r24
    2c1c:	dc f7       	brge	.-10     	; 0x2c14 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2c1e:	ec e2       	ldi	r30, 0x2C	; 44
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
}
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2c2a:	df 93       	push	r29
    2c2c:	cf 93       	push	r28
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <UART_sendString+0x6>
    2c30:	0f 92       	push	r0
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	9b 83       	std	Y+3, r25	; 0x03
    2c38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c3a:	19 82       	std	Y+1, r1	; 0x01
    2c3c:	0e c0       	rjmp	.+28     	; 0x2c5a <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	9b 81       	ldd	r25, Y+3	; 0x03
    2c48:	fc 01       	movw	r30, r24
    2c4a:	e2 0f       	add	r30, r18
    2c4c:	f3 1f       	adc	r31, r19
    2c4e:	80 81       	ld	r24, Z
    2c50:	0e 94 ef 15 	call	0x2bde	; 0x2bde <UART_sendByte>
		i++;
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	8f 5f       	subi	r24, 0xFF	; 255
    2c58:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	28 2f       	mov	r18, r24
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	9b 81       	ldd	r25, Y+3	; 0x03
    2c64:	fc 01       	movw	r30, r24
    2c66:	e2 0f       	add	r30, r18
    2c68:	f3 1f       	adc	r31, r19
    2c6a:	80 81       	ld	r24, Z
    2c6c:	88 23       	and	r24, r24
    2c6e:	39 f7       	brne	.-50     	; 0x2c3e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2c7c:	0f 93       	push	r16
    2c7e:	1f 93       	push	r17
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	00 d0       	rcall	.+0      	; 0x2c86 <UART_receiveString+0xa>
    2c86:	0f 92       	push	r0
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    2c8c:	9b 83       	std	Y+3, r25	; 0x03
    2c8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c90:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	28 2f       	mov	r18, r24
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9c:	8c 01       	movw	r16, r24
    2c9e:	02 0f       	add	r16, r18
    2ca0:	13 1f       	adc	r17, r19
    2ca2:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <UART_recieveByte>
    2ca6:	f8 01       	movw	r30, r16
    2ca8:	80 83       	st	Z, r24
    2caa:	0f c0       	rjmp	.+30     	; 0x2cca <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	8f 5f       	subi	r24, 0xFF	; 255
    2cb0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	28 2f       	mov	r18, r24
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbc:	8c 01       	movw	r16, r24
    2cbe:	02 0f       	add	r16, r18
    2cc0:	13 1f       	adc	r17, r19
    2cc2:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <UART_recieveByte>
    2cc6:	f8 01       	movw	r30, r16
    2cc8:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	e2 0f       	add	r30, r18
    2cd8:	f3 1f       	adc	r31, r19
    2cda:	80 81       	ld	r24, Z
    2cdc:	83 32       	cpi	r24, 0x23	; 35
    2cde:	31 f7       	brne	.-52     	; 0x2cac <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	28 2f       	mov	r18, r24
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cea:	fc 01       	movw	r30, r24
    2cec:	e2 0f       	add	r30, r18
    2cee:	f3 1f       	adc	r31, r19
    2cf0:	10 82       	st	Z, r1
}
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	08 95       	ret

00002d02 <__prologue_saves__>:
    2d02:	2f 92       	push	r2
    2d04:	3f 92       	push	r3
    2d06:	4f 92       	push	r4
    2d08:	5f 92       	push	r5
    2d0a:	6f 92       	push	r6
    2d0c:	7f 92       	push	r7
    2d0e:	8f 92       	push	r8
    2d10:	9f 92       	push	r9
    2d12:	af 92       	push	r10
    2d14:	bf 92       	push	r11
    2d16:	cf 92       	push	r12
    2d18:	df 92       	push	r13
    2d1a:	ef 92       	push	r14
    2d1c:	ff 92       	push	r15
    2d1e:	0f 93       	push	r16
    2d20:	1f 93       	push	r17
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	ca 1b       	sub	r28, r26
    2d2c:	db 0b       	sbc	r29, r27
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	09 94       	ijmp

00002d3a <__epilogue_restores__>:
    2d3a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d3c:	39 88       	ldd	r3, Y+17	; 0x11
    2d3e:	48 88       	ldd	r4, Y+16	; 0x10
    2d40:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d42:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d44:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d46:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d48:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d4c:	b9 84       	ldd	r11, Y+9	; 0x09
    2d4e:	c8 84       	ldd	r12, Y+8	; 0x08
    2d50:	df 80       	ldd	r13, Y+7	; 0x07
    2d52:	ee 80       	ldd	r14, Y+6	; 0x06
    2d54:	fd 80       	ldd	r15, Y+5	; 0x05
    2d56:	0c 81       	ldd	r16, Y+4	; 0x04
    2d58:	1b 81       	ldd	r17, Y+3	; 0x03
    2d5a:	aa 81       	ldd	r26, Y+2	; 0x02
    2d5c:	b9 81       	ldd	r27, Y+1	; 0x01
    2d5e:	ce 0f       	add	r28, r30
    2d60:	d1 1d       	adc	r29, r1
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	ed 01       	movw	r28, r26
    2d6e:	08 95       	ret

00002d70 <itoa>:
    2d70:	fb 01       	movw	r30, r22
    2d72:	9f 01       	movw	r18, r30
    2d74:	e8 94       	clt
    2d76:	42 30       	cpi	r20, 0x02	; 2
    2d78:	c4 f0       	brlt	.+48     	; 0x2daa <itoa+0x3a>
    2d7a:	45 32       	cpi	r20, 0x25	; 37
    2d7c:	b4 f4       	brge	.+44     	; 0x2daa <itoa+0x3a>
    2d7e:	4a 30       	cpi	r20, 0x0A	; 10
    2d80:	29 f4       	brne	.+10     	; 0x2d8c <itoa+0x1c>
    2d82:	97 fb       	bst	r25, 7
    2d84:	1e f4       	brtc	.+6      	; 0x2d8c <itoa+0x1c>
    2d86:	90 95       	com	r25
    2d88:	81 95       	neg	r24
    2d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8c:	64 2f       	mov	r22, r20
    2d8e:	77 27       	eor	r23, r23
    2d90:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__udivmodhi4>
    2d94:	80 5d       	subi	r24, 0xD0	; 208
    2d96:	8a 33       	cpi	r24, 0x3A	; 58
    2d98:	0c f0       	brlt	.+2      	; 0x2d9c <itoa+0x2c>
    2d9a:	89 5d       	subi	r24, 0xD9	; 217
    2d9c:	81 93       	st	Z+, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	a1 f7       	brne	.-24     	; 0x2d8c <itoa+0x1c>
    2da4:	16 f4       	brtc	.+4      	; 0x2daa <itoa+0x3a>
    2da6:	5d e2       	ldi	r21, 0x2D	; 45
    2da8:	51 93       	st	Z+, r21
    2daa:	10 82       	st	Z, r1
    2dac:	c9 01       	movw	r24, r18
    2dae:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <strrev>

00002db2 <strrev>:
    2db2:	dc 01       	movw	r26, r24
    2db4:	fc 01       	movw	r30, r24
    2db6:	67 2f       	mov	r22, r23
    2db8:	71 91       	ld	r23, Z+
    2dba:	77 23       	and	r23, r23
    2dbc:	e1 f7       	brne	.-8      	; 0x2db6 <strrev+0x4>
    2dbe:	32 97       	sbiw	r30, 0x02	; 2
    2dc0:	04 c0       	rjmp	.+8      	; 0x2dca <strrev+0x18>
    2dc2:	7c 91       	ld	r23, X
    2dc4:	6d 93       	st	X+, r22
    2dc6:	70 83       	st	Z, r23
    2dc8:	62 91       	ld	r22, -Z
    2dca:	ae 17       	cp	r26, r30
    2dcc:	bf 07       	cpc	r27, r31
    2dce:	c8 f3       	brcs	.-14     	; 0x2dc2 <strrev+0x10>
    2dd0:	08 95       	ret

00002dd2 <__udivmodhi4>:
    2dd2:	aa 1b       	sub	r26, r26
    2dd4:	bb 1b       	sub	r27, r27
    2dd6:	51 e1       	ldi	r21, 0x11	; 17
    2dd8:	07 c0       	rjmp	.+14     	; 0x2de8 <__udivmodhi4_ep>

00002dda <__udivmodhi4_loop>:
    2dda:	aa 1f       	adc	r26, r26
    2ddc:	bb 1f       	adc	r27, r27
    2dde:	a6 17       	cp	r26, r22
    2de0:	b7 07       	cpc	r27, r23
    2de2:	10 f0       	brcs	.+4      	; 0x2de8 <__udivmodhi4_ep>
    2de4:	a6 1b       	sub	r26, r22
    2de6:	b7 0b       	sbc	r27, r23

00002de8 <__udivmodhi4_ep>:
    2de8:	88 1f       	adc	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	5a 95       	dec	r21
    2dee:	a9 f7       	brne	.-22     	; 0x2dda <__udivmodhi4_loop>
    2df0:	80 95       	com	r24
    2df2:	90 95       	com	r25
    2df4:	bc 01       	movw	r22, r24
    2df6:	cd 01       	movw	r24, r26
    2df8:	08 95       	ret

00002dfa <_exit>:
    2dfa:	f8 94       	cli

00002dfc <__stop_program>:
    2dfc:	ff cf       	rjmp	.-2      	; 0x2dfc <__stop_program>
